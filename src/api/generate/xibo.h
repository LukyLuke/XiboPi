// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* xibo.h
   Generated by wsdl2h 2.8.78 from service_v5.wsdl and typemap.dat
   2019-02-09 12:49:32 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on xibo.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++11,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:xmds                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "urn:xmds"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:xmds"
//gsoap ns1   schema namespace:	urn:xmds
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:xmds                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:xmds                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:xmds                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:xmds                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	xmdsBinding 
//gsoap ns1  service type:	xmdsPortType 
//gsoap ns1  service port:	{{XMDS_LOCATION}} 
//gsoap ns1  service namespace:	urn:xmds 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref xmdsBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page xmdsBinding Binding "xmdsBinding"

@section xmdsBinding_operations Operations of Binding "xmdsBinding"

  - @ref ns1__RegisterDisplay

  - @ref ns1__RequiredFiles

  - @ref ns1__GetFile

  - @ref ns1__Schedule

  - @ref ns1__BlackList

  - @ref ns1__SubmitLog

  - @ref ns1__SubmitStats

  - @ref ns1__MediaInventory

  - @ref ns1__GetResource

  - @ref ns1__NotifyStatus

  - @ref ns1__SubmitScreenShot

@section xmdsBinding_ports Default endpoints of Binding "xmdsBinding"

  - {{XMDS_LOCATION}}

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   xmdsBinding                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__RegisterDisplay                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__RegisterDisplay" of service binding "xmdsBinding".
Register the Display with the CMS

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#RegisterDisplay"

  - Addressing input action: "urn:xmds#RegisterDisplay"

  - Addressing output action: "urn:xmds#RegisterDisplayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RegisterDisplay(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         displayName,
    std::string                         clientType,
    std::string                         clientVersion,
    int                                 clientCode,
    std::string                         operatingSystem,
    std::string                         macAddress,
    std::string                         xmrChannel,
    std::string                         xmrPubKey,
    // output parameters:
    std::string                        &ActivationMessage
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RegisterDisplay(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         displayName,
    std::string                         clientType,
    std::string                         clientVersion,
    int                                 clientCode,
    std::string                         operatingSystem,
    std::string                         macAddress,
    std::string                         xmrChannel,
    std::string                         xmrPubKey,
    // output parameters:
    std::string                        &ActivationMessage
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RegisterDisplay SOAP
//gsoap ns1  service method-style:	RegisterDisplay rpc
//gsoap ns1  service method-encoding:	RegisterDisplay http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	RegisterDisplay urn:xmds#RegisterDisplay
//gsoap ns1  service method-output-action:	RegisterDisplay urn:xmds#RegisterDisplayResponse
int ns1__RegisterDisplay(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :displayName,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :clientType,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :clientVersion,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :clientCode,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :operatingSystem,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :macAddress,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :xmrChannel,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :xmrPubKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:ActivationMessage	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__RequiredFiles                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__RequiredFiles" of service binding "xmdsBinding".
The files required by the requesting display

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#RequiredFiles"

  - Addressing input action: "urn:xmds#RequiredFiles"

  - Addressing output action: "urn:xmds#RequiredFilesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__RequiredFiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    // output parameters:
    std::string                        &RequiredFilesXml
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__RequiredFiles(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    // output parameters:
    std::string                        &RequiredFilesXml
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RequiredFiles SOAP
//gsoap ns1  service method-style:	RequiredFiles rpc
//gsoap ns1  service method-encoding:	RequiredFiles http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	RequiredFiles urn:xmds#RequiredFiles
//gsoap ns1  service method-output-action:	RequiredFiles urn:xmds#RequiredFilesResponse
int ns1__RequiredFiles(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:RequiredFilesXml	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetFile                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetFile" of service binding "xmdsBinding".
Gets the file requested

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#GetFile"

  - Addressing input action: "urn:xmds#GetFile"

  - Addressing output action: "urn:xmds#GetFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 fileId,
    std::string                         fileType,
    double                              chunkOffset,
    double                              chuckSize,
    // output parameters:
    xsd__base64Binary                  &file
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetFile(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 fileId,
    std::string                         fileType,
    double                              chunkOffset,
    double                              chuckSize,
    // output parameters:
    xsd__base64Binary                  &file
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFile SOAP
//gsoap ns1  service method-style:	GetFile rpc
//gsoap ns1  service method-encoding:	GetFile http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GetFile urn:xmds#GetFile
//gsoap ns1  service method-output-action:	GetFile urn:xmds#GetFileResponse
int ns1__GetFile(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :fileId,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :fileType,	///< Input parameter, :unqualified name as per RPC encoding
    double                              :chunkOffset,	///< Input parameter, :unqualified name as per RPC encoding
    double                              :chuckSize,	///< Input parameter, :unqualified name as per RPC encoding
    xsd__base64Binary                  &:file	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__Schedule                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__Schedule" of service binding "xmdsBinding".
Gets the schedule

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#Schedule"

  - Addressing input action: "urn:xmds#Schedule"

  - Addressing output action: "urn:xmds#ScheduleResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__Schedule(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    // output parameters:
    std::string                        &ScheduleXml
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__Schedule(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    // output parameters:
    std::string                        &ScheduleXml
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Schedule SOAP
//gsoap ns1  service method-style:	Schedule rpc
//gsoap ns1  service method-encoding:	Schedule http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	Schedule urn:xmds#Schedule
//gsoap ns1  service method-output-action:	Schedule urn:xmds#ScheduleResponse
int ns1__Schedule(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:ScheduleXml	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__BlackList                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__BlackList" of service binding "xmdsBinding".
Set media to be blacklisted

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#BlackList"

  - Addressing input action: "urn:xmds#BlackList"

  - Addressing output action: "urn:xmds#BlackListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__BlackList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 mediaId,
    std::string                         type,
    std::string                         reason,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__BlackList(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 mediaId,
    std::string                         type,
    std::string                         reason,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BlackList SOAP
//gsoap ns1  service method-style:	BlackList rpc
//gsoap ns1  service method-encoding:	BlackList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	BlackList urn:xmds#BlackList
//gsoap ns1  service method-output-action:	BlackList urn:xmds#BlackListResponse
int ns1__BlackList(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :mediaId,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :type,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :reason,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SubmitLog                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__SubmitLog" of service binding "xmdsBinding".
Submit Logging from the Client

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#SubmitLog"

  - Addressing input action: "urn:xmds#SubmitLog"

  - Addressing output action: "urn:xmds#SubmitLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SubmitLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         logXml,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SubmitLog(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         logXml,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SubmitLog SOAP
//gsoap ns1  service method-style:	SubmitLog rpc
//gsoap ns1  service method-encoding:	SubmitLog http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	SubmitLog urn:xmds#SubmitLog
//gsoap ns1  service method-output-action:	SubmitLog urn:xmds#SubmitLogResponse
int ns1__SubmitLog(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :logXml,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SubmitStats                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__SubmitStats" of service binding "xmdsBinding".
Submit Display statistics from the Client

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#SubmitLog"

  - Addressing input action: "urn:xmds#SubmitLog"

  - Addressing output action: "urn:xmds#SubmitLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SubmitStats(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         statXml,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SubmitStats(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         statXml,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SubmitStats SOAP
//gsoap ns1  service method-style:	SubmitStats rpc
//gsoap ns1  service method-encoding:	SubmitStats http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	SubmitStats urn:xmds#SubmitLog
//gsoap ns1  service method-output-action:	SubmitStats urn:xmds#SubmitLogResponse
int ns1__SubmitStats(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :statXml,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__MediaInventory                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__MediaInventory" of service binding "xmdsBinding".
Report back the clients MediaInventory

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#MediaInventory"

  - Addressing input action: "urn:xmds#MediaInventory"

  - Addressing output action: "urn:xmds#MediaInventoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__MediaInventory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         mediaInventory,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__MediaInventory(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         mediaInventory,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MediaInventory SOAP
//gsoap ns1  service method-style:	MediaInventory rpc
//gsoap ns1  service method-encoding:	MediaInventory http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	MediaInventory urn:xmds#MediaInventory
//gsoap ns1  service method-output-action:	MediaInventory urn:xmds#MediaInventoryResponse
int ns1__MediaInventory(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :mediaInventory,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetResource                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetResource" of service binding "xmdsBinding".
Gets the file requested

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#GetResource"

  - Addressing input action: "urn:xmds#GetResource"

  - Addressing output action: "urn:xmds#GetResourceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetResource(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 layoutId,
    std::string                         regionId,
    std::string                         mediaId,
    // output parameters:
    std::string                        &resource
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetResource(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    int                                 layoutId,
    std::string                         regionId,
    std::string                         mediaId,
    // output parameters:
    std::string                        &resource
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetResource SOAP
//gsoap ns1  service method-style:	GetResource rpc
//gsoap ns1  service method-encoding:	GetResource http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GetResource urn:xmds#GetResource
//gsoap ns1  service method-output-action:	GetResource urn:xmds#GetResourceResponse
int ns1__GetResource(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :layoutId,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :regionId,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :mediaId,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                        &:resource	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__NotifyStatus                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__NotifyStatus" of service binding "xmdsBinding".
Report back the current status

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#NotifyStatus"

  - Addressing input action: "urn:xmds#NotifyStatus"

  - Addressing output action: "urn:xmds#NotifyStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__NotifyStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         status,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__NotifyStatus(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    std::string                         status,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NotifyStatus SOAP
//gsoap ns1  service method-style:	NotifyStatus rpc
//gsoap ns1  service method-encoding:	NotifyStatus http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	NotifyStatus urn:xmds#NotifyStatus
//gsoap ns1  service method-output-action:	NotifyStatus urn:xmds#NotifyStatusResponse
int ns1__NotifyStatus(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :status,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SubmitScreenShot                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__SubmitScreenShot" of service binding "xmdsBinding".
Submit a screen shot for a display

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - {{XMDS_LOCATION}}

  - Default SOAP action or REST location path:
    - "urn:xmds#SubmitScreenShot"

  - Addressing input action: "urn:xmds#SubmitScreenShot"

  - Addressing output action: "urn:xmds#SubmitScreenShotResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SubmitScreenShot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    xsd__base64Binary                   screenShot,
    // output parameters:
    bool                               &success
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SubmitScreenShot(
    struct soap *soap,
    // input parameters:
    std::string                         serverKey,
    std::string                         hardwareKey,
    xsd__base64Binary                   screenShot,
    // output parameters:
    bool                               &success
  );
@endcode

C++ proxy class (defined in soapxmdsBindingProxy.h generated with soapcpp2):
@code
  class xmdsBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapxmdsBindingService.h generated with soapcpp2):
@code
  class xmdsBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SubmitScreenShot SOAP
//gsoap ns1  service method-style:	SubmitScreenShot rpc
//gsoap ns1  service method-encoding:	SubmitScreenShot http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	SubmitScreenShot urn:xmds#SubmitScreenShot
//gsoap ns1  service method-output-action:	SubmitScreenShot urn:xmds#SubmitScreenShotResponse
int ns1__SubmitScreenShot(
    std::string                         :serverKey,	///< Input parameter, :unqualified name as per RPC encoding
    std::string                         :hardwareKey,	///< Input parameter, :unqualified name as per RPC encoding
    xsd__base64Binary                   :screenShot,	///< Input parameter, :unqualified name as per RPC encoding
    bool                               &:success	///< Output parameter, :unqualified name as per RPC encoding
);

/**

@page xmdsBinding Binding "xmdsBinding"

@section xmdsBinding_policy_enablers Policy Enablers of Binding "xmdsBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:xmds"

*/

/* End of xibo.h */
