/* soapxmdsBindingProxy.h
   Generated by gSOAP 2.8.78 for xibo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapxmdsBindingProxy_H
#define soapxmdsBindingProxy_H
#include "soapH.h"

    class SOAP_CMAC xmdsBindingProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'xmdsBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in xibo.h, if any
        /// Construct a proxy with new managing context
        xmdsBindingProxy();
        /// Copy constructor
        xmdsBindingProxy(const xmdsBindingProxy& rhs);
        /// Construct proxy given a shared managing context
        xmdsBindingProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        xmdsBindingProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        xmdsBindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        xmdsBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        xmdsBindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        xmdsBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the contructor
        virtual ~xmdsBindingProxy();
        /// Initializer used by constructors
        virtual void xmdsBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual xmdsBindingProxy *copy();
        /// Copy assignment
        xmdsBindingProxy& operator=(const xmdsBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'RegisterDisplay' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int RegisterDisplay(const std::string& serverKey, const std::string& hardwareKey, const std::string& displayName, const std::string& clientType, const std::string& clientVersion, int clientCode, const std::string& operatingSystem, const std::string& macAddress, const std::string& xmrChannel, const std::string& xmrPubKey, std::string &ActivationMessage) { return this->RegisterDisplay(NULL, NULL, serverKey, hardwareKey, displayName, clientType, clientVersion, clientCode, operatingSystem, macAddress, xmrChannel, xmrPubKey, ActivationMessage); }
        /// Web service synchronous operation 'RegisterDisplay' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int RegisterDisplay(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& displayName, const std::string& clientType, const std::string& clientVersion, int clientCode, const std::string& operatingSystem, const std::string& macAddress, const std::string& xmrChannel, const std::string& xmrPubKey, std::string &ActivationMessage) { return this->send_RegisterDisplay(soap_endpoint_url, soap_action, serverKey, hardwareKey, displayName, clientType, clientVersion, clientCode, operatingSystem, macAddress, xmrChannel, xmrPubKey) || this->recv_RegisterDisplay(ActivationMessage) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_RegisterDisplay' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_RegisterDisplay(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& displayName, const std::string& clientType, const std::string& clientVersion, int clientCode, const std::string& operatingSystem, const std::string& macAddress, const std::string& xmrChannel, const std::string& xmrPubKey);
        /// Web service asynchronous operation 'recv_RegisterDisplay' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_RegisterDisplay(std::string &ActivationMessage);
        //
        /// Web service synchronous operation 'RequiredFiles' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int RequiredFiles(const std::string& serverKey, const std::string& hardwareKey, std::string &RequiredFilesXml) { return this->RequiredFiles(NULL, NULL, serverKey, hardwareKey, RequiredFilesXml); }
        /// Web service synchronous operation 'RequiredFiles' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int RequiredFiles(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, std::string &RequiredFilesXml) { return this->send_RequiredFiles(soap_endpoint_url, soap_action, serverKey, hardwareKey) || this->recv_RequiredFiles(RequiredFilesXml) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_RequiredFiles' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_RequiredFiles(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey);
        /// Web service asynchronous operation 'recv_RequiredFiles' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_RequiredFiles(std::string &RequiredFilesXml);
        //
        /// Web service synchronous operation 'GetFile' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetFile(const std::string& serverKey, const std::string& hardwareKey, int fileId, const std::string& fileType, double chunkOffset, double chuckSize, xsd__base64Binary &file) { return this->GetFile(NULL, NULL, serverKey, hardwareKey, fileId, fileType, chunkOffset, chuckSize, file); }
        /// Web service synchronous operation 'GetFile' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetFile(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int fileId, const std::string& fileType, double chunkOffset, double chuckSize, xsd__base64Binary &file) { return this->send_GetFile(soap_endpoint_url, soap_action, serverKey, hardwareKey, fileId, fileType, chunkOffset, chuckSize) || this->recv_GetFile(file) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetFile' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetFile(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int fileId, const std::string& fileType, double chunkOffset, double chuckSize);
        /// Web service asynchronous operation 'recv_GetFile' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetFile(xsd__base64Binary &file);
        //
        /// Web service synchronous operation 'Schedule' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int Schedule(const std::string& serverKey, const std::string& hardwareKey, std::string &ScheduleXml) { return this->Schedule(NULL, NULL, serverKey, hardwareKey, ScheduleXml); }
        /// Web service synchronous operation 'Schedule' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int Schedule(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, std::string &ScheduleXml) { return this->send_Schedule(soap_endpoint_url, soap_action, serverKey, hardwareKey) || this->recv_Schedule(ScheduleXml) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_Schedule' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_Schedule(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey);
        /// Web service asynchronous operation 'recv_Schedule' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_Schedule(std::string &ScheduleXml);
        //
        /// Web service synchronous operation 'BlackList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int BlackList(const std::string& serverKey, const std::string& hardwareKey, int mediaId, const std::string& type, const std::string& reason, bool &success) { return this->BlackList(NULL, NULL, serverKey, hardwareKey, mediaId, type, reason, success); }
        /// Web service synchronous operation 'BlackList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int BlackList(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int mediaId, const std::string& type, const std::string& reason, bool &success) { return this->send_BlackList(soap_endpoint_url, soap_action, serverKey, hardwareKey, mediaId, type, reason) || this->recv_BlackList(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_BlackList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_BlackList(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int mediaId, const std::string& type, const std::string& reason);
        /// Web service asynchronous operation 'recv_BlackList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_BlackList(bool &success);
        //
        /// Web service synchronous operation 'SubmitLog' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitLog(const std::string& serverKey, const std::string& hardwareKey, const std::string& logXml, bool &success) { return this->SubmitLog(NULL, NULL, serverKey, hardwareKey, logXml, success); }
        /// Web service synchronous operation 'SubmitLog' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitLog(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& logXml, bool &success) { return this->send_SubmitLog(soap_endpoint_url, soap_action, serverKey, hardwareKey, logXml) || this->recv_SubmitLog(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SubmitLog' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SubmitLog(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& logXml);
        /// Web service asynchronous operation 'recv_SubmitLog' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SubmitLog(bool &success);
        //
        /// Web service synchronous operation 'SubmitStats' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitStats(const std::string& serverKey, const std::string& hardwareKey, const std::string& statXml, bool &success) { return this->SubmitStats(NULL, NULL, serverKey, hardwareKey, statXml, success); }
        /// Web service synchronous operation 'SubmitStats' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitStats(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& statXml, bool &success) { return this->send_SubmitStats(soap_endpoint_url, soap_action, serverKey, hardwareKey, statXml) || this->recv_SubmitStats(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SubmitStats' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SubmitStats(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& statXml);
        /// Web service asynchronous operation 'recv_SubmitStats' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SubmitStats(bool &success);
        //
        /// Web service synchronous operation 'MediaInventory' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int MediaInventory(const std::string& serverKey, const std::string& hardwareKey, const std::string& mediaInventory, bool &success) { return this->MediaInventory(NULL, NULL, serverKey, hardwareKey, mediaInventory, success); }
        /// Web service synchronous operation 'MediaInventory' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int MediaInventory(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& mediaInventory, bool &success) { return this->send_MediaInventory(soap_endpoint_url, soap_action, serverKey, hardwareKey, mediaInventory) || this->recv_MediaInventory(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_MediaInventory' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_MediaInventory(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& mediaInventory);
        /// Web service asynchronous operation 'recv_MediaInventory' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_MediaInventory(bool &success);
        //
        /// Web service synchronous operation 'GetResource' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetResource(const std::string& serverKey, const std::string& hardwareKey, int layoutId, const std::string& regionId, const std::string& mediaId, std::string &resource) { return this->GetResource(NULL, NULL, serverKey, hardwareKey, layoutId, regionId, mediaId, resource); }
        /// Web service synchronous operation 'GetResource' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetResource(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int layoutId, const std::string& regionId, const std::string& mediaId, std::string &resource) { return this->send_GetResource(soap_endpoint_url, soap_action, serverKey, hardwareKey, layoutId, regionId, mediaId) || this->recv_GetResource(resource) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetResource' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetResource(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, int layoutId, const std::string& regionId, const std::string& mediaId);
        /// Web service asynchronous operation 'recv_GetResource' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetResource(std::string &resource);
        //
        /// Web service synchronous operation 'NotifyStatus' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int NotifyStatus(const std::string& serverKey, const std::string& hardwareKey, const std::string& status, bool &success) { return this->NotifyStatus(NULL, NULL, serverKey, hardwareKey, status, success); }
        /// Web service synchronous operation 'NotifyStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int NotifyStatus(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& status, bool &success) { return this->send_NotifyStatus(soap_endpoint_url, soap_action, serverKey, hardwareKey, status) || this->recv_NotifyStatus(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_NotifyStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_NotifyStatus(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const std::string& status);
        /// Web service asynchronous operation 'recv_NotifyStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_NotifyStatus(bool &success);
        //
        /// Web service synchronous operation 'SubmitScreenShot' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitScreenShot(const std::string& serverKey, const std::string& hardwareKey, const xsd__base64Binary& screenShot, bool &success) { return this->SubmitScreenShot(NULL, NULL, serverKey, hardwareKey, screenShot, success); }
        /// Web service synchronous operation 'SubmitScreenShot' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SubmitScreenShot(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const xsd__base64Binary& screenShot, bool &success) { return this->send_SubmitScreenShot(soap_endpoint_url, soap_action, serverKey, hardwareKey, screenShot) || this->recv_SubmitScreenShot(success) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SubmitScreenShot' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SubmitScreenShot(const char *soap_endpoint_url, const char *soap_action, const std::string& serverKey, const std::string& hardwareKey, const xsd__base64Binary& screenShot);
        /// Web service asynchronous operation 'recv_SubmitScreenShot' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SubmitScreenShot(bool &success);
    };
#endif
