/* soapH.h
   Generated by gSOAP 2.8.61 for xibo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__SubmitScreenShot_DEFINED
#define SOAP_TYPE_ns1__SubmitScreenShot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitScreenShot(struct soap*, struct ns1__SubmitScreenShot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitScreenShot(struct soap*, const struct ns1__SubmitScreenShot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScreenShot(struct soap*, const char*, int, const struct ns1__SubmitScreenShot *, const char*);
SOAP_FMAC3 struct ns1__SubmitScreenShot * SOAP_FMAC4 soap_in_ns1__SubmitScreenShot(struct soap*, const char*, struct ns1__SubmitScreenShot *, const char*);
SOAP_FMAC1 struct ns1__SubmitScreenShot * SOAP_FMAC2 soap_instantiate_ns1__SubmitScreenShot(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitScreenShot * soap_new_ns1__SubmitScreenShot(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitScreenShot(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitScreenShot * soap_new_req_ns1__SubmitScreenShot(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const xsd__base64Binary& screenShot)
{
	struct ns1__SubmitScreenShot *_p = ::soap_new_ns1__SubmitScreenShot(soap);
	if (_p)
	{	::soap_default_ns1__SubmitScreenShot(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->screenShot = screenShot;
	}
	return _p;
}

inline struct ns1__SubmitScreenShot * soap_new_set_ns1__SubmitScreenShot(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const xsd__base64Binary& screenShot)
{
	struct ns1__SubmitScreenShot *_p = ::soap_new_ns1__SubmitScreenShot(soap);
	if (_p)
	{	::soap_default_ns1__SubmitScreenShot(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->screenShot = screenShot;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitScreenShot(struct soap*, const struct ns1__SubmitScreenShot *, const char*, const char*);

inline int soap_write_ns1__SubmitScreenShot(struct soap *soap, struct ns1__SubmitScreenShot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitScreenShot(soap, p), 0) || ::soap_put_ns1__SubmitScreenShot(soap, p, "ns1:SubmitScreenShot", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitScreenShot(struct soap *soap, const char *URL, struct ns1__SubmitScreenShot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitScreenShot(soap, p), 0) || ::soap_put_ns1__SubmitScreenShot(soap, p, "ns1:SubmitScreenShot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitScreenShot(struct soap *soap, const char *URL, struct ns1__SubmitScreenShot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitScreenShot(soap, p), 0) || ::soap_put_ns1__SubmitScreenShot(soap, p, "ns1:SubmitScreenShot", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitScreenShot * SOAP_FMAC4 soap_get_ns1__SubmitScreenShot(struct soap*, struct ns1__SubmitScreenShot *, const char*, const char*);

inline int soap_read_ns1__SubmitScreenShot(struct soap *soap, struct ns1__SubmitScreenShot *p)
{
	if (p)
	{	::soap_default_ns1__SubmitScreenShot(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitScreenShot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitScreenShot(struct soap *soap, const char *URL, struct ns1__SubmitScreenShot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitScreenShot(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitScreenShot(struct soap *soap, struct ns1__SubmitScreenShot *p)
{
	if (::soap_read_ns1__SubmitScreenShot(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitScreenShotResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitScreenShotResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitScreenShotResponse(struct soap*, struct ns1__SubmitScreenShotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitScreenShotResponse(struct soap*, const struct ns1__SubmitScreenShotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScreenShotResponse(struct soap*, const char*, int, const struct ns1__SubmitScreenShotResponse *, const char*);
SOAP_FMAC3 struct ns1__SubmitScreenShotResponse * SOAP_FMAC4 soap_in_ns1__SubmitScreenShotResponse(struct soap*, const char*, struct ns1__SubmitScreenShotResponse *, const char*);
SOAP_FMAC1 struct ns1__SubmitScreenShotResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitScreenShotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitScreenShotResponse * soap_new_ns1__SubmitScreenShotResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitScreenShotResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitScreenShotResponse * soap_new_req_ns1__SubmitScreenShotResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitScreenShotResponse *_p = ::soap_new_ns1__SubmitScreenShotResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitScreenShotResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__SubmitScreenShotResponse * soap_new_set_ns1__SubmitScreenShotResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitScreenShotResponse *_p = ::soap_new_ns1__SubmitScreenShotResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitScreenShotResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitScreenShotResponse(struct soap*, const struct ns1__SubmitScreenShotResponse *, const char*, const char*);

inline int soap_write_ns1__SubmitScreenShotResponse(struct soap *soap, struct ns1__SubmitScreenShotResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitScreenShotResponse(soap, p), 0) || ::soap_put_ns1__SubmitScreenShotResponse(soap, p, "ns1:SubmitScreenShotResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitScreenShotResponse(struct soap *soap, const char *URL, struct ns1__SubmitScreenShotResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitScreenShotResponse(soap, p), 0) || ::soap_put_ns1__SubmitScreenShotResponse(soap, p, "ns1:SubmitScreenShotResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitScreenShotResponse(struct soap *soap, const char *URL, struct ns1__SubmitScreenShotResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitScreenShotResponse(soap, p), 0) || ::soap_put_ns1__SubmitScreenShotResponse(soap, p, "ns1:SubmitScreenShotResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitScreenShotResponse * SOAP_FMAC4 soap_get_ns1__SubmitScreenShotResponse(struct soap*, struct ns1__SubmitScreenShotResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitScreenShotResponse(struct soap *soap, struct ns1__SubmitScreenShotResponse *p)
{
	if (p)
	{	::soap_default_ns1__SubmitScreenShotResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitScreenShotResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitScreenShotResponse(struct soap *soap, const char *URL, struct ns1__SubmitScreenShotResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitScreenShotResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitScreenShotResponse(struct soap *soap, struct ns1__SubmitScreenShotResponse *p)
{
	if (::soap_read_ns1__SubmitScreenShotResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__NotifyStatus_DEFINED
#define SOAP_TYPE_ns1__NotifyStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NotifyStatus(struct soap*, struct ns1__NotifyStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NotifyStatus(struct soap*, const struct ns1__NotifyStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NotifyStatus(struct soap*, const char*, int, const struct ns1__NotifyStatus *, const char*);
SOAP_FMAC3 struct ns1__NotifyStatus * SOAP_FMAC4 soap_in_ns1__NotifyStatus(struct soap*, const char*, struct ns1__NotifyStatus *, const char*);
SOAP_FMAC1 struct ns1__NotifyStatus * SOAP_FMAC2 soap_instantiate_ns1__NotifyStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__NotifyStatus * soap_new_ns1__NotifyStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NotifyStatus(soap, n, NULL, NULL, NULL);
}

inline struct ns1__NotifyStatus * soap_new_req_ns1__NotifyStatus(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& status)
{
	struct ns1__NotifyStatus *_p = ::soap_new_ns1__NotifyStatus(soap);
	if (_p)
	{	::soap_default_ns1__NotifyStatus(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->status = status;
	}
	return _p;
}

inline struct ns1__NotifyStatus * soap_new_set_ns1__NotifyStatus(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& status)
{
	struct ns1__NotifyStatus *_p = ::soap_new_ns1__NotifyStatus(soap);
	if (_p)
	{	::soap_default_ns1__NotifyStatus(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->status = status;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NotifyStatus(struct soap*, const struct ns1__NotifyStatus *, const char*, const char*);

inline int soap_write_ns1__NotifyStatus(struct soap *soap, struct ns1__NotifyStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__NotifyStatus(soap, p), 0) || ::soap_put_ns1__NotifyStatus(soap, p, "ns1:NotifyStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NotifyStatus(struct soap *soap, const char *URL, struct ns1__NotifyStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__NotifyStatus(soap, p), 0) || ::soap_put_ns1__NotifyStatus(soap, p, "ns1:NotifyStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NotifyStatus(struct soap *soap, const char *URL, struct ns1__NotifyStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__NotifyStatus(soap, p), 0) || ::soap_put_ns1__NotifyStatus(soap, p, "ns1:NotifyStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__NotifyStatus * SOAP_FMAC4 soap_get_ns1__NotifyStatus(struct soap*, struct ns1__NotifyStatus *, const char*, const char*);

inline int soap_read_ns1__NotifyStatus(struct soap *soap, struct ns1__NotifyStatus *p)
{
	if (p)
	{	::soap_default_ns1__NotifyStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NotifyStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NotifyStatus(struct soap *soap, const char *URL, struct ns1__NotifyStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NotifyStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__NotifyStatus(struct soap *soap, struct ns1__NotifyStatus *p)
{
	if (::soap_read_ns1__NotifyStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__NotifyStatusResponse_DEFINED
#define SOAP_TYPE_ns1__NotifyStatusResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NotifyStatusResponse(struct soap*, struct ns1__NotifyStatusResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NotifyStatusResponse(struct soap*, const struct ns1__NotifyStatusResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NotifyStatusResponse(struct soap*, const char*, int, const struct ns1__NotifyStatusResponse *, const char*);
SOAP_FMAC3 struct ns1__NotifyStatusResponse * SOAP_FMAC4 soap_in_ns1__NotifyStatusResponse(struct soap*, const char*, struct ns1__NotifyStatusResponse *, const char*);
SOAP_FMAC1 struct ns1__NotifyStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__NotifyStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__NotifyStatusResponse * soap_new_ns1__NotifyStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NotifyStatusResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__NotifyStatusResponse * soap_new_req_ns1__NotifyStatusResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__NotifyStatusResponse *_p = ::soap_new_ns1__NotifyStatusResponse(soap);
	if (_p)
	{	::soap_default_ns1__NotifyStatusResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__NotifyStatusResponse * soap_new_set_ns1__NotifyStatusResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__NotifyStatusResponse *_p = ::soap_new_ns1__NotifyStatusResponse(soap);
	if (_p)
	{	::soap_default_ns1__NotifyStatusResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NotifyStatusResponse(struct soap*, const struct ns1__NotifyStatusResponse *, const char*, const char*);

inline int soap_write_ns1__NotifyStatusResponse(struct soap *soap, struct ns1__NotifyStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__NotifyStatusResponse(soap, p), 0) || ::soap_put_ns1__NotifyStatusResponse(soap, p, "ns1:NotifyStatusResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NotifyStatusResponse(struct soap *soap, const char *URL, struct ns1__NotifyStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__NotifyStatusResponse(soap, p), 0) || ::soap_put_ns1__NotifyStatusResponse(soap, p, "ns1:NotifyStatusResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NotifyStatusResponse(struct soap *soap, const char *URL, struct ns1__NotifyStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__NotifyStatusResponse(soap, p), 0) || ::soap_put_ns1__NotifyStatusResponse(soap, p, "ns1:NotifyStatusResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__NotifyStatusResponse * SOAP_FMAC4 soap_get_ns1__NotifyStatusResponse(struct soap*, struct ns1__NotifyStatusResponse *, const char*, const char*);

inline int soap_read_ns1__NotifyStatusResponse(struct soap *soap, struct ns1__NotifyStatusResponse *p)
{
	if (p)
	{	::soap_default_ns1__NotifyStatusResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NotifyStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NotifyStatusResponse(struct soap *soap, const char *URL, struct ns1__NotifyStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NotifyStatusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__NotifyStatusResponse(struct soap *soap, struct ns1__NotifyStatusResponse *p)
{
	if (::soap_read_ns1__NotifyStatusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetResource_DEFINED
#define SOAP_TYPE_ns1__GetResource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetResource(struct soap*, struct ns1__GetResource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetResource(struct soap*, const struct ns1__GetResource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetResource(struct soap*, const char*, int, const struct ns1__GetResource *, const char*);
SOAP_FMAC3 struct ns1__GetResource * SOAP_FMAC4 soap_in_ns1__GetResource(struct soap*, const char*, struct ns1__GetResource *, const char*);
SOAP_FMAC1 struct ns1__GetResource * SOAP_FMAC2 soap_instantiate_ns1__GetResource(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetResource * soap_new_ns1__GetResource(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetResource(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetResource * soap_new_req_ns1__GetResource(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int layoutId,
	const std::string& regionId,
	const std::string& mediaId)
{
	struct ns1__GetResource *_p = ::soap_new_ns1__GetResource(soap);
	if (_p)
	{	::soap_default_ns1__GetResource(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->layoutId = layoutId;
		_p->regionId = regionId;
		_p->mediaId = mediaId;
	}
	return _p;
}

inline struct ns1__GetResource * soap_new_set_ns1__GetResource(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int layoutId,
	const std::string& regionId,
	const std::string& mediaId)
{
	struct ns1__GetResource *_p = ::soap_new_ns1__GetResource(soap);
	if (_p)
	{	::soap_default_ns1__GetResource(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->layoutId = layoutId;
		_p->regionId = regionId;
		_p->mediaId = mediaId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetResource(struct soap*, const struct ns1__GetResource *, const char*, const char*);

inline int soap_write_ns1__GetResource(struct soap *soap, struct ns1__GetResource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetResource(soap, p), 0) || ::soap_put_ns1__GetResource(soap, p, "ns1:GetResource", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetResource(struct soap *soap, const char *URL, struct ns1__GetResource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetResource(soap, p), 0) || ::soap_put_ns1__GetResource(soap, p, "ns1:GetResource", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetResource(struct soap *soap, const char *URL, struct ns1__GetResource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetResource(soap, p), 0) || ::soap_put_ns1__GetResource(soap, p, "ns1:GetResource", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetResource * SOAP_FMAC4 soap_get_ns1__GetResource(struct soap*, struct ns1__GetResource *, const char*, const char*);

inline int soap_read_ns1__GetResource(struct soap *soap, struct ns1__GetResource *p)
{
	if (p)
	{	::soap_default_ns1__GetResource(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetResource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetResource(struct soap *soap, const char *URL, struct ns1__GetResource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetResource(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetResource(struct soap *soap, struct ns1__GetResource *p)
{
	if (::soap_read_ns1__GetResource(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetResourceResponse_DEFINED
#define SOAP_TYPE_ns1__GetResourceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetResourceResponse(struct soap*, struct ns1__GetResourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetResourceResponse(struct soap*, const struct ns1__GetResourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetResourceResponse(struct soap*, const char*, int, const struct ns1__GetResourceResponse *, const char*);
SOAP_FMAC3 struct ns1__GetResourceResponse * SOAP_FMAC4 soap_in_ns1__GetResourceResponse(struct soap*, const char*, struct ns1__GetResourceResponse *, const char*);
SOAP_FMAC1 struct ns1__GetResourceResponse * SOAP_FMAC2 soap_instantiate_ns1__GetResourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetResourceResponse * soap_new_ns1__GetResourceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetResourceResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetResourceResponse * soap_new_req_ns1__GetResourceResponse(
	struct soap *soap,
	const std::string& resource)
{
	struct ns1__GetResourceResponse *_p = ::soap_new_ns1__GetResourceResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetResourceResponse(soap, _p);
		_p->resource = resource;
	}
	return _p;
}

inline struct ns1__GetResourceResponse * soap_new_set_ns1__GetResourceResponse(
	struct soap *soap,
	const std::string& resource)
{
	struct ns1__GetResourceResponse *_p = ::soap_new_ns1__GetResourceResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetResourceResponse(soap, _p);
		_p->resource = resource;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetResourceResponse(struct soap*, const struct ns1__GetResourceResponse *, const char*, const char*);

inline int soap_write_ns1__GetResourceResponse(struct soap *soap, struct ns1__GetResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetResourceResponse(soap, p), 0) || ::soap_put_ns1__GetResourceResponse(soap, p, "ns1:GetResourceResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetResourceResponse(struct soap *soap, const char *URL, struct ns1__GetResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetResourceResponse(soap, p), 0) || ::soap_put_ns1__GetResourceResponse(soap, p, "ns1:GetResourceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetResourceResponse(struct soap *soap, const char *URL, struct ns1__GetResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetResourceResponse(soap, p), 0) || ::soap_put_ns1__GetResourceResponse(soap, p, "ns1:GetResourceResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetResourceResponse * SOAP_FMAC4 soap_get_ns1__GetResourceResponse(struct soap*, struct ns1__GetResourceResponse *, const char*, const char*);

inline int soap_read_ns1__GetResourceResponse(struct soap *soap, struct ns1__GetResourceResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetResourceResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetResourceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetResourceResponse(struct soap *soap, const char *URL, struct ns1__GetResourceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetResourceResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetResourceResponse(struct soap *soap, struct ns1__GetResourceResponse *p)
{
	if (::soap_read_ns1__GetResourceResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaInventory_DEFINED
#define SOAP_TYPE_ns1__MediaInventory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__MediaInventory(struct soap*, struct ns1__MediaInventory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__MediaInventory(struct soap*, const struct ns1__MediaInventory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaInventory(struct soap*, const char*, int, const struct ns1__MediaInventory *, const char*);
SOAP_FMAC3 struct ns1__MediaInventory * SOAP_FMAC4 soap_in_ns1__MediaInventory(struct soap*, const char*, struct ns1__MediaInventory *, const char*);
SOAP_FMAC1 struct ns1__MediaInventory * SOAP_FMAC2 soap_instantiate_ns1__MediaInventory(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__MediaInventory * soap_new_ns1__MediaInventory(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaInventory(soap, n, NULL, NULL, NULL);
}

inline struct ns1__MediaInventory * soap_new_req_ns1__MediaInventory(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& mediaInventory)
{
	struct ns1__MediaInventory *_p = ::soap_new_ns1__MediaInventory(soap);
	if (_p)
	{	::soap_default_ns1__MediaInventory(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->mediaInventory = mediaInventory;
	}
	return _p;
}

inline struct ns1__MediaInventory * soap_new_set_ns1__MediaInventory(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& mediaInventory)
{
	struct ns1__MediaInventory *_p = ::soap_new_ns1__MediaInventory(soap);
	if (_p)
	{	::soap_default_ns1__MediaInventory(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->mediaInventory = mediaInventory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MediaInventory(struct soap*, const struct ns1__MediaInventory *, const char*, const char*);

inline int soap_write_ns1__MediaInventory(struct soap *soap, struct ns1__MediaInventory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__MediaInventory(soap, p), 0) || ::soap_put_ns1__MediaInventory(soap, p, "ns1:MediaInventory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaInventory(struct soap *soap, const char *URL, struct ns1__MediaInventory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__MediaInventory(soap, p), 0) || ::soap_put_ns1__MediaInventory(soap, p, "ns1:MediaInventory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaInventory(struct soap *soap, const char *URL, struct ns1__MediaInventory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__MediaInventory(soap, p), 0) || ::soap_put_ns1__MediaInventory(soap, p, "ns1:MediaInventory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__MediaInventory * SOAP_FMAC4 soap_get_ns1__MediaInventory(struct soap*, struct ns1__MediaInventory *, const char*, const char*);

inline int soap_read_ns1__MediaInventory(struct soap *soap, struct ns1__MediaInventory *p)
{
	if (p)
	{	::soap_default_ns1__MediaInventory(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MediaInventory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaInventory(struct soap *soap, const char *URL, struct ns1__MediaInventory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MediaInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaInventory(struct soap *soap, struct ns1__MediaInventory *p)
{
	if (::soap_read_ns1__MediaInventory(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaInventoryResponse_DEFINED
#define SOAP_TYPE_ns1__MediaInventoryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__MediaInventoryResponse(struct soap*, struct ns1__MediaInventoryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__MediaInventoryResponse(struct soap*, const struct ns1__MediaInventoryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaInventoryResponse(struct soap*, const char*, int, const struct ns1__MediaInventoryResponse *, const char*);
SOAP_FMAC3 struct ns1__MediaInventoryResponse * SOAP_FMAC4 soap_in_ns1__MediaInventoryResponse(struct soap*, const char*, struct ns1__MediaInventoryResponse *, const char*);
SOAP_FMAC1 struct ns1__MediaInventoryResponse * SOAP_FMAC2 soap_instantiate_ns1__MediaInventoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__MediaInventoryResponse * soap_new_ns1__MediaInventoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaInventoryResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__MediaInventoryResponse * soap_new_req_ns1__MediaInventoryResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__MediaInventoryResponse *_p = ::soap_new_ns1__MediaInventoryResponse(soap);
	if (_p)
	{	::soap_default_ns1__MediaInventoryResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__MediaInventoryResponse * soap_new_set_ns1__MediaInventoryResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__MediaInventoryResponse *_p = ::soap_new_ns1__MediaInventoryResponse(soap);
	if (_p)
	{	::soap_default_ns1__MediaInventoryResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MediaInventoryResponse(struct soap*, const struct ns1__MediaInventoryResponse *, const char*, const char*);

inline int soap_write_ns1__MediaInventoryResponse(struct soap *soap, struct ns1__MediaInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__MediaInventoryResponse(soap, p), 0) || ::soap_put_ns1__MediaInventoryResponse(soap, p, "ns1:MediaInventoryResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaInventoryResponse(struct soap *soap, const char *URL, struct ns1__MediaInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__MediaInventoryResponse(soap, p), 0) || ::soap_put_ns1__MediaInventoryResponse(soap, p, "ns1:MediaInventoryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaInventoryResponse(struct soap *soap, const char *URL, struct ns1__MediaInventoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__MediaInventoryResponse(soap, p), 0) || ::soap_put_ns1__MediaInventoryResponse(soap, p, "ns1:MediaInventoryResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__MediaInventoryResponse * SOAP_FMAC4 soap_get_ns1__MediaInventoryResponse(struct soap*, struct ns1__MediaInventoryResponse *, const char*, const char*);

inline int soap_read_ns1__MediaInventoryResponse(struct soap *soap, struct ns1__MediaInventoryResponse *p)
{
	if (p)
	{	::soap_default_ns1__MediaInventoryResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MediaInventoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaInventoryResponse(struct soap *soap, const char *URL, struct ns1__MediaInventoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MediaInventoryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaInventoryResponse(struct soap *soap, struct ns1__MediaInventoryResponse *p)
{
	if (::soap_read_ns1__MediaInventoryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitStats_DEFINED
#define SOAP_TYPE_ns1__SubmitStats_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitStats(struct soap*, struct ns1__SubmitStats *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitStats(struct soap*, const struct ns1__SubmitStats *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitStats(struct soap*, const char*, int, const struct ns1__SubmitStats *, const char*);
SOAP_FMAC3 struct ns1__SubmitStats * SOAP_FMAC4 soap_in_ns1__SubmitStats(struct soap*, const char*, struct ns1__SubmitStats *, const char*);
SOAP_FMAC1 struct ns1__SubmitStats * SOAP_FMAC2 soap_instantiate_ns1__SubmitStats(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitStats * soap_new_ns1__SubmitStats(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitStats(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitStats * soap_new_req_ns1__SubmitStats(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& statXml)
{
	struct ns1__SubmitStats *_p = ::soap_new_ns1__SubmitStats(soap);
	if (_p)
	{	::soap_default_ns1__SubmitStats(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->statXml = statXml;
	}
	return _p;
}

inline struct ns1__SubmitStats * soap_new_set_ns1__SubmitStats(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& statXml)
{
	struct ns1__SubmitStats *_p = ::soap_new_ns1__SubmitStats(soap);
	if (_p)
	{	::soap_default_ns1__SubmitStats(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->statXml = statXml;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitStats(struct soap*, const struct ns1__SubmitStats *, const char*, const char*);

inline int soap_write_ns1__SubmitStats(struct soap *soap, struct ns1__SubmitStats const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitStats(soap, p), 0) || ::soap_put_ns1__SubmitStats(soap, p, "ns1:SubmitStats", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitStats(struct soap *soap, const char *URL, struct ns1__SubmitStats const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitStats(soap, p), 0) || ::soap_put_ns1__SubmitStats(soap, p, "ns1:SubmitStats", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitStats(struct soap *soap, const char *URL, struct ns1__SubmitStats const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitStats(soap, p), 0) || ::soap_put_ns1__SubmitStats(soap, p, "ns1:SubmitStats", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitStats * SOAP_FMAC4 soap_get_ns1__SubmitStats(struct soap*, struct ns1__SubmitStats *, const char*, const char*);

inline int soap_read_ns1__SubmitStats(struct soap *soap, struct ns1__SubmitStats *p)
{
	if (p)
	{	::soap_default_ns1__SubmitStats(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitStats(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitStats(struct soap *soap, const char *URL, struct ns1__SubmitStats *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitStats(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitStats(struct soap *soap, struct ns1__SubmitStats *p)
{
	if (::soap_read_ns1__SubmitStats(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitStatsResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitStatsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitStatsResponse(struct soap*, struct ns1__SubmitStatsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitStatsResponse(struct soap*, const struct ns1__SubmitStatsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitStatsResponse(struct soap*, const char*, int, const struct ns1__SubmitStatsResponse *, const char*);
SOAP_FMAC3 struct ns1__SubmitStatsResponse * SOAP_FMAC4 soap_in_ns1__SubmitStatsResponse(struct soap*, const char*, struct ns1__SubmitStatsResponse *, const char*);
SOAP_FMAC1 struct ns1__SubmitStatsResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitStatsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitStatsResponse * soap_new_ns1__SubmitStatsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitStatsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitStatsResponse * soap_new_req_ns1__SubmitStatsResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitStatsResponse *_p = ::soap_new_ns1__SubmitStatsResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitStatsResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__SubmitStatsResponse * soap_new_set_ns1__SubmitStatsResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitStatsResponse *_p = ::soap_new_ns1__SubmitStatsResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitStatsResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitStatsResponse(struct soap*, const struct ns1__SubmitStatsResponse *, const char*, const char*);

inline int soap_write_ns1__SubmitStatsResponse(struct soap *soap, struct ns1__SubmitStatsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitStatsResponse(soap, p), 0) || ::soap_put_ns1__SubmitStatsResponse(soap, p, "ns1:SubmitStatsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitStatsResponse(struct soap *soap, const char *URL, struct ns1__SubmitStatsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitStatsResponse(soap, p), 0) || ::soap_put_ns1__SubmitStatsResponse(soap, p, "ns1:SubmitStatsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitStatsResponse(struct soap *soap, const char *URL, struct ns1__SubmitStatsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitStatsResponse(soap, p), 0) || ::soap_put_ns1__SubmitStatsResponse(soap, p, "ns1:SubmitStatsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitStatsResponse * SOAP_FMAC4 soap_get_ns1__SubmitStatsResponse(struct soap*, struct ns1__SubmitStatsResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitStatsResponse(struct soap *soap, struct ns1__SubmitStatsResponse *p)
{
	if (p)
	{	::soap_default_ns1__SubmitStatsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitStatsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitStatsResponse(struct soap *soap, const char *URL, struct ns1__SubmitStatsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitStatsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitStatsResponse(struct soap *soap, struct ns1__SubmitStatsResponse *p)
{
	if (::soap_read_ns1__SubmitStatsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitLog_DEFINED
#define SOAP_TYPE_ns1__SubmitLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitLog(struct soap*, struct ns1__SubmitLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitLog(struct soap*, const struct ns1__SubmitLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitLog(struct soap*, const char*, int, const struct ns1__SubmitLog *, const char*);
SOAP_FMAC3 struct ns1__SubmitLog * SOAP_FMAC4 soap_in_ns1__SubmitLog(struct soap*, const char*, struct ns1__SubmitLog *, const char*);
SOAP_FMAC1 struct ns1__SubmitLog * SOAP_FMAC2 soap_instantiate_ns1__SubmitLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitLog * soap_new_ns1__SubmitLog(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitLog(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitLog * soap_new_req_ns1__SubmitLog(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& logXml)
{
	struct ns1__SubmitLog *_p = ::soap_new_ns1__SubmitLog(soap);
	if (_p)
	{	::soap_default_ns1__SubmitLog(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->logXml = logXml;
	}
	return _p;
}

inline struct ns1__SubmitLog * soap_new_set_ns1__SubmitLog(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& logXml)
{
	struct ns1__SubmitLog *_p = ::soap_new_ns1__SubmitLog(soap);
	if (_p)
	{	::soap_default_ns1__SubmitLog(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->logXml = logXml;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitLog(struct soap*, const struct ns1__SubmitLog *, const char*, const char*);

inline int soap_write_ns1__SubmitLog(struct soap *soap, struct ns1__SubmitLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitLog(soap, p), 0) || ::soap_put_ns1__SubmitLog(soap, p, "ns1:SubmitLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitLog(struct soap *soap, const char *URL, struct ns1__SubmitLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitLog(soap, p), 0) || ::soap_put_ns1__SubmitLog(soap, p, "ns1:SubmitLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitLog(struct soap *soap, const char *URL, struct ns1__SubmitLog const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitLog(soap, p), 0) || ::soap_put_ns1__SubmitLog(soap, p, "ns1:SubmitLog", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitLog * SOAP_FMAC4 soap_get_ns1__SubmitLog(struct soap*, struct ns1__SubmitLog *, const char*, const char*);

inline int soap_read_ns1__SubmitLog(struct soap *soap, struct ns1__SubmitLog *p)
{
	if (p)
	{	::soap_default_ns1__SubmitLog(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitLog(struct soap *soap, const char *URL, struct ns1__SubmitLog *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitLog(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitLog(struct soap *soap, struct ns1__SubmitLog *p)
{
	if (::soap_read_ns1__SubmitLog(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitLogResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitLogResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitLogResponse(struct soap*, struct ns1__SubmitLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitLogResponse(struct soap*, const struct ns1__SubmitLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitLogResponse(struct soap*, const char*, int, const struct ns1__SubmitLogResponse *, const char*);
SOAP_FMAC3 struct ns1__SubmitLogResponse * SOAP_FMAC4 soap_in_ns1__SubmitLogResponse(struct soap*, const char*, struct ns1__SubmitLogResponse *, const char*);
SOAP_FMAC1 struct ns1__SubmitLogResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubmitLogResponse * soap_new_ns1__SubmitLogResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitLogResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubmitLogResponse * soap_new_req_ns1__SubmitLogResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitLogResponse *_p = ::soap_new_ns1__SubmitLogResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitLogResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__SubmitLogResponse * soap_new_set_ns1__SubmitLogResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__SubmitLogResponse *_p = ::soap_new_ns1__SubmitLogResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubmitLogResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitLogResponse(struct soap*, const struct ns1__SubmitLogResponse *, const char*, const char*);

inline int soap_write_ns1__SubmitLogResponse(struct soap *soap, struct ns1__SubmitLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubmitLogResponse(soap, p), 0) || ::soap_put_ns1__SubmitLogResponse(soap, p, "ns1:SubmitLogResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitLogResponse(struct soap *soap, const char *URL, struct ns1__SubmitLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitLogResponse(soap, p), 0) || ::soap_put_ns1__SubmitLogResponse(soap, p, "ns1:SubmitLogResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitLogResponse(struct soap *soap, const char *URL, struct ns1__SubmitLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubmitLogResponse(soap, p), 0) || ::soap_put_ns1__SubmitLogResponse(soap, p, "ns1:SubmitLogResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubmitLogResponse * SOAP_FMAC4 soap_get_ns1__SubmitLogResponse(struct soap*, struct ns1__SubmitLogResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitLogResponse(struct soap *soap, struct ns1__SubmitLogResponse *p)
{
	if (p)
	{	::soap_default_ns1__SubmitLogResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitLogResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitLogResponse(struct soap *soap, const char *URL, struct ns1__SubmitLogResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitLogResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitLogResponse(struct soap *soap, struct ns1__SubmitLogResponse *p)
{
	if (::soap_read_ns1__SubmitLogResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BlackList_DEFINED
#define SOAP_TYPE_ns1__BlackList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__BlackList(struct soap*, struct ns1__BlackList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__BlackList(struct soap*, const struct ns1__BlackList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BlackList(struct soap*, const char*, int, const struct ns1__BlackList *, const char*);
SOAP_FMAC3 struct ns1__BlackList * SOAP_FMAC4 soap_in_ns1__BlackList(struct soap*, const char*, struct ns1__BlackList *, const char*);
SOAP_FMAC1 struct ns1__BlackList * SOAP_FMAC2 soap_instantiate_ns1__BlackList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__BlackList * soap_new_ns1__BlackList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BlackList(soap, n, NULL, NULL, NULL);
}

inline struct ns1__BlackList * soap_new_req_ns1__BlackList(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int mediaId,
	const std::string& type,
	const std::string& reason)
{
	struct ns1__BlackList *_p = ::soap_new_ns1__BlackList(soap);
	if (_p)
	{	::soap_default_ns1__BlackList(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->mediaId = mediaId;
		_p->type = type;
		_p->reason = reason;
	}
	return _p;
}

inline struct ns1__BlackList * soap_new_set_ns1__BlackList(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int mediaId,
	const std::string& type,
	const std::string& reason)
{
	struct ns1__BlackList *_p = ::soap_new_ns1__BlackList(soap);
	if (_p)
	{	::soap_default_ns1__BlackList(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->mediaId = mediaId;
		_p->type = type;
		_p->reason = reason;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BlackList(struct soap*, const struct ns1__BlackList *, const char*, const char*);

inline int soap_write_ns1__BlackList(struct soap *soap, struct ns1__BlackList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__BlackList(soap, p), 0) || ::soap_put_ns1__BlackList(soap, p, "ns1:BlackList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BlackList(struct soap *soap, const char *URL, struct ns1__BlackList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__BlackList(soap, p), 0) || ::soap_put_ns1__BlackList(soap, p, "ns1:BlackList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BlackList(struct soap *soap, const char *URL, struct ns1__BlackList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__BlackList(soap, p), 0) || ::soap_put_ns1__BlackList(soap, p, "ns1:BlackList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__BlackList * SOAP_FMAC4 soap_get_ns1__BlackList(struct soap*, struct ns1__BlackList *, const char*, const char*);

inline int soap_read_ns1__BlackList(struct soap *soap, struct ns1__BlackList *p)
{
	if (p)
	{	::soap_default_ns1__BlackList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BlackList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BlackList(struct soap *soap, const char *URL, struct ns1__BlackList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BlackList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BlackList(struct soap *soap, struct ns1__BlackList *p)
{
	if (::soap_read_ns1__BlackList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BlackListResponse_DEFINED
#define SOAP_TYPE_ns1__BlackListResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__BlackListResponse(struct soap*, struct ns1__BlackListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__BlackListResponse(struct soap*, const struct ns1__BlackListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BlackListResponse(struct soap*, const char*, int, const struct ns1__BlackListResponse *, const char*);
SOAP_FMAC3 struct ns1__BlackListResponse * SOAP_FMAC4 soap_in_ns1__BlackListResponse(struct soap*, const char*, struct ns1__BlackListResponse *, const char*);
SOAP_FMAC1 struct ns1__BlackListResponse * SOAP_FMAC2 soap_instantiate_ns1__BlackListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__BlackListResponse * soap_new_ns1__BlackListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BlackListResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__BlackListResponse * soap_new_req_ns1__BlackListResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__BlackListResponse *_p = ::soap_new_ns1__BlackListResponse(soap);
	if (_p)
	{	::soap_default_ns1__BlackListResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}

inline struct ns1__BlackListResponse * soap_new_set_ns1__BlackListResponse(
	struct soap *soap,
	bool success)
{
	struct ns1__BlackListResponse *_p = ::soap_new_ns1__BlackListResponse(soap);
	if (_p)
	{	::soap_default_ns1__BlackListResponse(soap, _p);
		_p->success = success;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BlackListResponse(struct soap*, const struct ns1__BlackListResponse *, const char*, const char*);

inline int soap_write_ns1__BlackListResponse(struct soap *soap, struct ns1__BlackListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__BlackListResponse(soap, p), 0) || ::soap_put_ns1__BlackListResponse(soap, p, "ns1:BlackListResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BlackListResponse(struct soap *soap, const char *URL, struct ns1__BlackListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__BlackListResponse(soap, p), 0) || ::soap_put_ns1__BlackListResponse(soap, p, "ns1:BlackListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BlackListResponse(struct soap *soap, const char *URL, struct ns1__BlackListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__BlackListResponse(soap, p), 0) || ::soap_put_ns1__BlackListResponse(soap, p, "ns1:BlackListResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__BlackListResponse * SOAP_FMAC4 soap_get_ns1__BlackListResponse(struct soap*, struct ns1__BlackListResponse *, const char*, const char*);

inline int soap_read_ns1__BlackListResponse(struct soap *soap, struct ns1__BlackListResponse *p)
{
	if (p)
	{	::soap_default_ns1__BlackListResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BlackListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BlackListResponse(struct soap *soap, const char *URL, struct ns1__BlackListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BlackListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BlackListResponse(struct soap *soap, struct ns1__BlackListResponse *p)
{
	if (::soap_read_ns1__BlackListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Schedule_DEFINED
#define SOAP_TYPE_ns1__Schedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__Schedule(struct soap*, struct ns1__Schedule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Schedule(struct soap*, const struct ns1__Schedule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Schedule(struct soap*, const char*, int, const struct ns1__Schedule *, const char*);
SOAP_FMAC3 struct ns1__Schedule * SOAP_FMAC4 soap_in_ns1__Schedule(struct soap*, const char*, struct ns1__Schedule *, const char*);
SOAP_FMAC1 struct ns1__Schedule * SOAP_FMAC2 soap_instantiate_ns1__Schedule(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__Schedule * soap_new_ns1__Schedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Schedule(soap, n, NULL, NULL, NULL);
}

inline struct ns1__Schedule * soap_new_req_ns1__Schedule(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey)
{
	struct ns1__Schedule *_p = ::soap_new_ns1__Schedule(soap);
	if (_p)
	{	::soap_default_ns1__Schedule(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
	}
	return _p;
}

inline struct ns1__Schedule * soap_new_set_ns1__Schedule(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey)
{
	struct ns1__Schedule *_p = ::soap_new_ns1__Schedule(soap);
	if (_p)
	{	::soap_default_ns1__Schedule(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Schedule(struct soap*, const struct ns1__Schedule *, const char*, const char*);

inline int soap_write_ns1__Schedule(struct soap *soap, struct ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__Schedule(soap, p), 0) || ::soap_put_ns1__Schedule(soap, p, "ns1:Schedule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Schedule(struct soap *soap, const char *URL, struct ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__Schedule(soap, p), 0) || ::soap_put_ns1__Schedule(soap, p, "ns1:Schedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Schedule(struct soap *soap, const char *URL, struct ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__Schedule(soap, p), 0) || ::soap_put_ns1__Schedule(soap, p, "ns1:Schedule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__Schedule * SOAP_FMAC4 soap_get_ns1__Schedule(struct soap*, struct ns1__Schedule *, const char*, const char*);

inline int soap_read_ns1__Schedule(struct soap *soap, struct ns1__Schedule *p)
{
	if (p)
	{	::soap_default_ns1__Schedule(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Schedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Schedule(struct soap *soap, const char *URL, struct ns1__Schedule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Schedule(struct soap *soap, struct ns1__Schedule *p)
{
	if (::soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduleResponse_DEFINED
#define SOAP_TYPE_ns1__ScheduleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ScheduleResponse(struct soap*, struct ns1__ScheduleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ScheduleResponse(struct soap*, const struct ns1__ScheduleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduleResponse(struct soap*, const char*, int, const struct ns1__ScheduleResponse *, const char*);
SOAP_FMAC3 struct ns1__ScheduleResponse * SOAP_FMAC4 soap_in_ns1__ScheduleResponse(struct soap*, const char*, struct ns1__ScheduleResponse *, const char*);
SOAP_FMAC1 struct ns1__ScheduleResponse * SOAP_FMAC2 soap_instantiate_ns1__ScheduleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ScheduleResponse * soap_new_ns1__ScheduleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ScheduleResponse * soap_new_req_ns1__ScheduleResponse(
	struct soap *soap,
	const std::string& ScheduleXml)
{
	struct ns1__ScheduleResponse *_p = ::soap_new_ns1__ScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__ScheduleResponse(soap, _p);
		_p->ScheduleXml = ScheduleXml;
	}
	return _p;
}

inline struct ns1__ScheduleResponse * soap_new_set_ns1__ScheduleResponse(
	struct soap *soap,
	const std::string& ScheduleXml)
{
	struct ns1__ScheduleResponse *_p = ::soap_new_ns1__ScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__ScheduleResponse(soap, _p);
		_p->ScheduleXml = ScheduleXml;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ScheduleResponse(struct soap*, const struct ns1__ScheduleResponse *, const char*, const char*);

inline int soap_write_ns1__ScheduleResponse(struct soap *soap, struct ns1__ScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ScheduleResponse(soap, p), 0) || ::soap_put_ns1__ScheduleResponse(soap, p, "ns1:ScheduleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduleResponse(struct soap *soap, const char *URL, struct ns1__ScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ScheduleResponse(soap, p), 0) || ::soap_put_ns1__ScheduleResponse(soap, p, "ns1:ScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduleResponse(struct soap *soap, const char *URL, struct ns1__ScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ScheduleResponse(soap, p), 0) || ::soap_put_ns1__ScheduleResponse(soap, p, "ns1:ScheduleResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ScheduleResponse * SOAP_FMAC4 soap_get_ns1__ScheduleResponse(struct soap*, struct ns1__ScheduleResponse *, const char*, const char*);

inline int soap_read_ns1__ScheduleResponse(struct soap *soap, struct ns1__ScheduleResponse *p)
{
	if (p)
	{	::soap_default_ns1__ScheduleResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ScheduleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduleResponse(struct soap *soap, const char *URL, struct ns1__ScheduleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScheduleResponse(struct soap *soap, struct ns1__ScheduleResponse *p)
{
	if (::soap_read_ns1__ScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetFile_DEFINED
#define SOAP_TYPE_ns1__GetFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetFile(struct soap*, struct ns1__GetFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetFile(struct soap*, const struct ns1__GetFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFile(struct soap*, const char*, int, const struct ns1__GetFile *, const char*);
SOAP_FMAC3 struct ns1__GetFile * SOAP_FMAC4 soap_in_ns1__GetFile(struct soap*, const char*, struct ns1__GetFile *, const char*);
SOAP_FMAC1 struct ns1__GetFile * SOAP_FMAC2 soap_instantiate_ns1__GetFile(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetFile * soap_new_ns1__GetFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetFile(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetFile * soap_new_req_ns1__GetFile(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int fileId,
	const std::string& fileType,
	double chunkOffset,
	double chuckSize)
{
	struct ns1__GetFile *_p = ::soap_new_ns1__GetFile(soap);
	if (_p)
	{	::soap_default_ns1__GetFile(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->fileId = fileId;
		_p->fileType = fileType;
		_p->chunkOffset = chunkOffset;
		_p->chuckSize = chuckSize;
	}
	return _p;
}

inline struct ns1__GetFile * soap_new_set_ns1__GetFile(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	int fileId,
	const std::string& fileType,
	double chunkOffset,
	double chuckSize)
{
	struct ns1__GetFile *_p = ::soap_new_ns1__GetFile(soap);
	if (_p)
	{	::soap_default_ns1__GetFile(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->fileId = fileId;
		_p->fileType = fileType;
		_p->chunkOffset = chunkOffset;
		_p->chuckSize = chuckSize;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetFile(struct soap*, const struct ns1__GetFile *, const char*, const char*);

inline int soap_write_ns1__GetFile(struct soap *soap, struct ns1__GetFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetFile(soap, p), 0) || ::soap_put_ns1__GetFile(soap, p, "ns1:GetFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetFile(struct soap *soap, const char *URL, struct ns1__GetFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetFile(soap, p), 0) || ::soap_put_ns1__GetFile(soap, p, "ns1:GetFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetFile(struct soap *soap, const char *URL, struct ns1__GetFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetFile(soap, p), 0) || ::soap_put_ns1__GetFile(soap, p, "ns1:GetFile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetFile * SOAP_FMAC4 soap_get_ns1__GetFile(struct soap*, struct ns1__GetFile *, const char*, const char*);

inline int soap_read_ns1__GetFile(struct soap *soap, struct ns1__GetFile *p)
{
	if (p)
	{	::soap_default_ns1__GetFile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetFile(struct soap *soap, const char *URL, struct ns1__GetFile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetFile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetFile(struct soap *soap, struct ns1__GetFile *p)
{
	if (::soap_read_ns1__GetFile(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetFileResponse_DEFINED
#define SOAP_TYPE_ns1__GetFileResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetFileResponse(struct soap*, struct ns1__GetFileResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetFileResponse(struct soap*, const struct ns1__GetFileResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFileResponse(struct soap*, const char*, int, const struct ns1__GetFileResponse *, const char*);
SOAP_FMAC3 struct ns1__GetFileResponse * SOAP_FMAC4 soap_in_ns1__GetFileResponse(struct soap*, const char*, struct ns1__GetFileResponse *, const char*);
SOAP_FMAC1 struct ns1__GetFileResponse * SOAP_FMAC2 soap_instantiate_ns1__GetFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetFileResponse * soap_new_ns1__GetFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetFileResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetFileResponse * soap_new_req_ns1__GetFileResponse(
	struct soap *soap,
	const xsd__base64Binary& file)
{
	struct ns1__GetFileResponse *_p = ::soap_new_ns1__GetFileResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetFileResponse(soap, _p);
		_p->file = file;
	}
	return _p;
}

inline struct ns1__GetFileResponse * soap_new_set_ns1__GetFileResponse(
	struct soap *soap,
	const xsd__base64Binary& file)
{
	struct ns1__GetFileResponse *_p = ::soap_new_ns1__GetFileResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetFileResponse(soap, _p);
		_p->file = file;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetFileResponse(struct soap*, const struct ns1__GetFileResponse *, const char*, const char*);

inline int soap_write_ns1__GetFileResponse(struct soap *soap, struct ns1__GetFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetFileResponse(soap, p), 0) || ::soap_put_ns1__GetFileResponse(soap, p, "ns1:GetFileResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetFileResponse(struct soap *soap, const char *URL, struct ns1__GetFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetFileResponse(soap, p), 0) || ::soap_put_ns1__GetFileResponse(soap, p, "ns1:GetFileResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetFileResponse(struct soap *soap, const char *URL, struct ns1__GetFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetFileResponse(soap, p), 0) || ::soap_put_ns1__GetFileResponse(soap, p, "ns1:GetFileResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetFileResponse * SOAP_FMAC4 soap_get_ns1__GetFileResponse(struct soap*, struct ns1__GetFileResponse *, const char*, const char*);

inline int soap_read_ns1__GetFileResponse(struct soap *soap, struct ns1__GetFileResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetFileResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetFileResponse(struct soap *soap, const char *URL, struct ns1__GetFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetFileResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetFileResponse(struct soap *soap, struct ns1__GetFileResponse *p)
{
	if (::soap_read_ns1__GetFileResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RequiredFiles_DEFINED
#define SOAP_TYPE_ns1__RequiredFiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequiredFiles(struct soap*, struct ns1__RequiredFiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequiredFiles(struct soap*, const struct ns1__RequiredFiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequiredFiles(struct soap*, const char*, int, const struct ns1__RequiredFiles *, const char*);
SOAP_FMAC3 struct ns1__RequiredFiles * SOAP_FMAC4 soap_in_ns1__RequiredFiles(struct soap*, const char*, struct ns1__RequiredFiles *, const char*);
SOAP_FMAC1 struct ns1__RequiredFiles * SOAP_FMAC2 soap_instantiate_ns1__RequiredFiles(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__RequiredFiles * soap_new_ns1__RequiredFiles(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RequiredFiles(soap, n, NULL, NULL, NULL);
}

inline struct ns1__RequiredFiles * soap_new_req_ns1__RequiredFiles(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey)
{
	struct ns1__RequiredFiles *_p = ::soap_new_ns1__RequiredFiles(soap);
	if (_p)
	{	::soap_default_ns1__RequiredFiles(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
	}
	return _p;
}

inline struct ns1__RequiredFiles * soap_new_set_ns1__RequiredFiles(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey)
{
	struct ns1__RequiredFiles *_p = ::soap_new_ns1__RequiredFiles(soap);
	if (_p)
	{	::soap_default_ns1__RequiredFiles(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequiredFiles(struct soap*, const struct ns1__RequiredFiles *, const char*, const char*);

inline int soap_write_ns1__RequiredFiles(struct soap *soap, struct ns1__RequiredFiles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__RequiredFiles(soap, p), 0) || ::soap_put_ns1__RequiredFiles(soap, p, "ns1:RequiredFiles", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RequiredFiles(struct soap *soap, const char *URL, struct ns1__RequiredFiles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RequiredFiles(soap, p), 0) || ::soap_put_ns1__RequiredFiles(soap, p, "ns1:RequiredFiles", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RequiredFiles(struct soap *soap, const char *URL, struct ns1__RequiredFiles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RequiredFiles(soap, p), 0) || ::soap_put_ns1__RequiredFiles(soap, p, "ns1:RequiredFiles", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__RequiredFiles * SOAP_FMAC4 soap_get_ns1__RequiredFiles(struct soap*, struct ns1__RequiredFiles *, const char*, const char*);

inline int soap_read_ns1__RequiredFiles(struct soap *soap, struct ns1__RequiredFiles *p)
{
	if (p)
	{	::soap_default_ns1__RequiredFiles(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RequiredFiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RequiredFiles(struct soap *soap, const char *URL, struct ns1__RequiredFiles *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RequiredFiles(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RequiredFiles(struct soap *soap, struct ns1__RequiredFiles *p)
{
	if (::soap_read_ns1__RequiredFiles(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RequiredFilesResponse_DEFINED
#define SOAP_TYPE_ns1__RequiredFilesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequiredFilesResponse(struct soap*, struct ns1__RequiredFilesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequiredFilesResponse(struct soap*, const struct ns1__RequiredFilesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequiredFilesResponse(struct soap*, const char*, int, const struct ns1__RequiredFilesResponse *, const char*);
SOAP_FMAC3 struct ns1__RequiredFilesResponse * SOAP_FMAC4 soap_in_ns1__RequiredFilesResponse(struct soap*, const char*, struct ns1__RequiredFilesResponse *, const char*);
SOAP_FMAC1 struct ns1__RequiredFilesResponse * SOAP_FMAC2 soap_instantiate_ns1__RequiredFilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__RequiredFilesResponse * soap_new_ns1__RequiredFilesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RequiredFilesResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__RequiredFilesResponse * soap_new_req_ns1__RequiredFilesResponse(
	struct soap *soap,
	const std::string& RequiredFilesXml)
{
	struct ns1__RequiredFilesResponse *_p = ::soap_new_ns1__RequiredFilesResponse(soap);
	if (_p)
	{	::soap_default_ns1__RequiredFilesResponse(soap, _p);
		_p->RequiredFilesXml = RequiredFilesXml;
	}
	return _p;
}

inline struct ns1__RequiredFilesResponse * soap_new_set_ns1__RequiredFilesResponse(
	struct soap *soap,
	const std::string& RequiredFilesXml)
{
	struct ns1__RequiredFilesResponse *_p = ::soap_new_ns1__RequiredFilesResponse(soap);
	if (_p)
	{	::soap_default_ns1__RequiredFilesResponse(soap, _p);
		_p->RequiredFilesXml = RequiredFilesXml;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequiredFilesResponse(struct soap*, const struct ns1__RequiredFilesResponse *, const char*, const char*);

inline int soap_write_ns1__RequiredFilesResponse(struct soap *soap, struct ns1__RequiredFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__RequiredFilesResponse(soap, p), 0) || ::soap_put_ns1__RequiredFilesResponse(soap, p, "ns1:RequiredFilesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RequiredFilesResponse(struct soap *soap, const char *URL, struct ns1__RequiredFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RequiredFilesResponse(soap, p), 0) || ::soap_put_ns1__RequiredFilesResponse(soap, p, "ns1:RequiredFilesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RequiredFilesResponse(struct soap *soap, const char *URL, struct ns1__RequiredFilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RequiredFilesResponse(soap, p), 0) || ::soap_put_ns1__RequiredFilesResponse(soap, p, "ns1:RequiredFilesResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__RequiredFilesResponse * SOAP_FMAC4 soap_get_ns1__RequiredFilesResponse(struct soap*, struct ns1__RequiredFilesResponse *, const char*, const char*);

inline int soap_read_ns1__RequiredFilesResponse(struct soap *soap, struct ns1__RequiredFilesResponse *p)
{
	if (p)
	{	::soap_default_ns1__RequiredFilesResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RequiredFilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RequiredFilesResponse(struct soap *soap, const char *URL, struct ns1__RequiredFilesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RequiredFilesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RequiredFilesResponse(struct soap *soap, struct ns1__RequiredFilesResponse *p)
{
	if (::soap_read_ns1__RequiredFilesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RegisterDisplay_DEFINED
#define SOAP_TYPE_ns1__RegisterDisplay_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterDisplay(struct soap*, struct ns1__RegisterDisplay *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterDisplay(struct soap*, const struct ns1__RegisterDisplay *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterDisplay(struct soap*, const char*, int, const struct ns1__RegisterDisplay *, const char*);
SOAP_FMAC3 struct ns1__RegisterDisplay * SOAP_FMAC4 soap_in_ns1__RegisterDisplay(struct soap*, const char*, struct ns1__RegisterDisplay *, const char*);
SOAP_FMAC1 struct ns1__RegisterDisplay * SOAP_FMAC2 soap_instantiate_ns1__RegisterDisplay(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__RegisterDisplay * soap_new_ns1__RegisterDisplay(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RegisterDisplay(soap, n, NULL, NULL, NULL);
}

inline struct ns1__RegisterDisplay * soap_new_req_ns1__RegisterDisplay(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& displayName,
	const std::string& clientType,
	const std::string& clientVersion,
	int clientCode,
	const std::string& operatingSystem,
	const std::string& macAddress,
	const std::string& xmrChannel,
	const std::string& xmrPubKey)
{
	struct ns1__RegisterDisplay *_p = ::soap_new_ns1__RegisterDisplay(soap);
	if (_p)
	{	::soap_default_ns1__RegisterDisplay(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->displayName = displayName;
		_p->clientType = clientType;
		_p->clientVersion = clientVersion;
		_p->clientCode = clientCode;
		_p->operatingSystem = operatingSystem;
		_p->macAddress = macAddress;
		_p->xmrChannel = xmrChannel;
		_p->xmrPubKey = xmrPubKey;
	}
	return _p;
}

inline struct ns1__RegisterDisplay * soap_new_set_ns1__RegisterDisplay(
	struct soap *soap,
	const std::string& serverKey,
	const std::string& hardwareKey,
	const std::string& displayName,
	const std::string& clientType,
	const std::string& clientVersion,
	int clientCode,
	const std::string& operatingSystem,
	const std::string& macAddress,
	const std::string& xmrChannel,
	const std::string& xmrPubKey)
{
	struct ns1__RegisterDisplay *_p = ::soap_new_ns1__RegisterDisplay(soap);
	if (_p)
	{	::soap_default_ns1__RegisterDisplay(soap, _p);
		_p->serverKey = serverKey;
		_p->hardwareKey = hardwareKey;
		_p->displayName = displayName;
		_p->clientType = clientType;
		_p->clientVersion = clientVersion;
		_p->clientCode = clientCode;
		_p->operatingSystem = operatingSystem;
		_p->macAddress = macAddress;
		_p->xmrChannel = xmrChannel;
		_p->xmrPubKey = xmrPubKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterDisplay(struct soap*, const struct ns1__RegisterDisplay *, const char*, const char*);

inline int soap_write_ns1__RegisterDisplay(struct soap *soap, struct ns1__RegisterDisplay const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__RegisterDisplay(soap, p), 0) || ::soap_put_ns1__RegisterDisplay(soap, p, "ns1:RegisterDisplay", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegisterDisplay(struct soap *soap, const char *URL, struct ns1__RegisterDisplay const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RegisterDisplay(soap, p), 0) || ::soap_put_ns1__RegisterDisplay(soap, p, "ns1:RegisterDisplay", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegisterDisplay(struct soap *soap, const char *URL, struct ns1__RegisterDisplay const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RegisterDisplay(soap, p), 0) || ::soap_put_ns1__RegisterDisplay(soap, p, "ns1:RegisterDisplay", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__RegisterDisplay * SOAP_FMAC4 soap_get_ns1__RegisterDisplay(struct soap*, struct ns1__RegisterDisplay *, const char*, const char*);

inline int soap_read_ns1__RegisterDisplay(struct soap *soap, struct ns1__RegisterDisplay *p)
{
	if (p)
	{	::soap_default_ns1__RegisterDisplay(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RegisterDisplay(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegisterDisplay(struct soap *soap, const char *URL, struct ns1__RegisterDisplay *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegisterDisplay(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RegisterDisplay(struct soap *soap, struct ns1__RegisterDisplay *p)
{
	if (::soap_read_ns1__RegisterDisplay(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RegisterDisplayResponse_DEFINED
#define SOAP_TYPE_ns1__RegisterDisplayResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterDisplayResponse(struct soap*, struct ns1__RegisterDisplayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterDisplayResponse(struct soap*, const struct ns1__RegisterDisplayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterDisplayResponse(struct soap*, const char*, int, const struct ns1__RegisterDisplayResponse *, const char*);
SOAP_FMAC3 struct ns1__RegisterDisplayResponse * SOAP_FMAC4 soap_in_ns1__RegisterDisplayResponse(struct soap*, const char*, struct ns1__RegisterDisplayResponse *, const char*);
SOAP_FMAC1 struct ns1__RegisterDisplayResponse * SOAP_FMAC2 soap_instantiate_ns1__RegisterDisplayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__RegisterDisplayResponse * soap_new_ns1__RegisterDisplayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RegisterDisplayResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__RegisterDisplayResponse * soap_new_req_ns1__RegisterDisplayResponse(
	struct soap *soap,
	const std::string& ActivationMessage)
{
	struct ns1__RegisterDisplayResponse *_p = ::soap_new_ns1__RegisterDisplayResponse(soap);
	if (_p)
	{	::soap_default_ns1__RegisterDisplayResponse(soap, _p);
		_p->ActivationMessage = ActivationMessage;
	}
	return _p;
}

inline struct ns1__RegisterDisplayResponse * soap_new_set_ns1__RegisterDisplayResponse(
	struct soap *soap,
	const std::string& ActivationMessage)
{
	struct ns1__RegisterDisplayResponse *_p = ::soap_new_ns1__RegisterDisplayResponse(soap);
	if (_p)
	{	::soap_default_ns1__RegisterDisplayResponse(soap, _p);
		_p->ActivationMessage = ActivationMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterDisplayResponse(struct soap*, const struct ns1__RegisterDisplayResponse *, const char*, const char*);

inline int soap_write_ns1__RegisterDisplayResponse(struct soap *soap, struct ns1__RegisterDisplayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__RegisterDisplayResponse(soap, p), 0) || ::soap_put_ns1__RegisterDisplayResponse(soap, p, "ns1:RegisterDisplayResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegisterDisplayResponse(struct soap *soap, const char *URL, struct ns1__RegisterDisplayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RegisterDisplayResponse(soap, p), 0) || ::soap_put_ns1__RegisterDisplayResponse(soap, p, "ns1:RegisterDisplayResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegisterDisplayResponse(struct soap *soap, const char *URL, struct ns1__RegisterDisplayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__RegisterDisplayResponse(soap, p), 0) || ::soap_put_ns1__RegisterDisplayResponse(soap, p, "ns1:RegisterDisplayResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__RegisterDisplayResponse * SOAP_FMAC4 soap_get_ns1__RegisterDisplayResponse(struct soap*, struct ns1__RegisterDisplayResponse *, const char*, const char*);

inline int soap_read_ns1__RegisterDisplayResponse(struct soap *soap, struct ns1__RegisterDisplayResponse *p)
{
	if (p)
	{	::soap_default_ns1__RegisterDisplayResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RegisterDisplayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegisterDisplayResponse(struct soap *soap, const char *URL, struct ns1__RegisterDisplayResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegisterDisplayResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RegisterDisplayResponse(struct soap *soap, struct ns1__RegisterDisplayResponse *p)
{
	if (::soap_read_ns1__RegisterDisplayResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
