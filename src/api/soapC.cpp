/* soapC.cpp
   Generated by gSOAP 2.8.61 for xibo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.61 2018-02-10 17:11:30 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_ns1__SubmitScreenShot:
		return soap_in_ns1__SubmitScreenShot(soap, NULL, NULL, "ns1:SubmitScreenShot");
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		return soap_in_ns1__SubmitScreenShotResponse(soap, NULL, NULL, "ns1:SubmitScreenShotResponse");
	case SOAP_TYPE_ns1__NotifyStatus:
		return soap_in_ns1__NotifyStatus(soap, NULL, NULL, "ns1:NotifyStatus");
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		return soap_in_ns1__NotifyStatusResponse(soap, NULL, NULL, "ns1:NotifyStatusResponse");
	case SOAP_TYPE_ns1__GetResource:
		return soap_in_ns1__GetResource(soap, NULL, NULL, "ns1:GetResource");
	case SOAP_TYPE_ns1__GetResourceResponse:
		return soap_in_ns1__GetResourceResponse(soap, NULL, NULL, "ns1:GetResourceResponse");
	case SOAP_TYPE_ns1__MediaInventory:
		return soap_in_ns1__MediaInventory(soap, NULL, NULL, "ns1:MediaInventory");
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		return soap_in_ns1__MediaInventoryResponse(soap, NULL, NULL, "ns1:MediaInventoryResponse");
	case SOAP_TYPE_ns1__SubmitStats:
		return soap_in_ns1__SubmitStats(soap, NULL, NULL, "ns1:SubmitStats");
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		return soap_in_ns1__SubmitStatsResponse(soap, NULL, NULL, "ns1:SubmitStatsResponse");
	case SOAP_TYPE_ns1__SubmitLog:
		return soap_in_ns1__SubmitLog(soap, NULL, NULL, "ns1:SubmitLog");
	case SOAP_TYPE_ns1__SubmitLogResponse:
		return soap_in_ns1__SubmitLogResponse(soap, NULL, NULL, "ns1:SubmitLogResponse");
	case SOAP_TYPE_ns1__BlackList:
		return soap_in_ns1__BlackList(soap, NULL, NULL, "ns1:BlackList");
	case SOAP_TYPE_ns1__BlackListResponse:
		return soap_in_ns1__BlackListResponse(soap, NULL, NULL, "ns1:BlackListResponse");
	case SOAP_TYPE_ns1__Schedule:
		return soap_in_ns1__Schedule(soap, NULL, NULL, "ns1:Schedule");
	case SOAP_TYPE_ns1__ScheduleResponse:
		return soap_in_ns1__ScheduleResponse(soap, NULL, NULL, "ns1:ScheduleResponse");
	case SOAP_TYPE_ns1__GetFile:
		return soap_in_ns1__GetFile(soap, NULL, NULL, "ns1:GetFile");
	case SOAP_TYPE_ns1__GetFileResponse:
		return soap_in_ns1__GetFileResponse(soap, NULL, NULL, "ns1:GetFileResponse");
	case SOAP_TYPE_ns1__RequiredFiles:
		return soap_in_ns1__RequiredFiles(soap, NULL, NULL, "ns1:RequiredFiles");
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		return soap_in_ns1__RequiredFilesResponse(soap, NULL, NULL, "ns1:RequiredFilesResponse");
	case SOAP_TYPE_ns1__RegisterDisplay:
		return soap_in_ns1__RegisterDisplay(soap, NULL, NULL, "ns1:RegisterDisplay");
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		return soap_in_ns1__RegisterDisplayResponse(soap, NULL, NULL, "ns1:RegisterDisplayResponse");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitScreenShot"))
		{	*type = SOAP_TYPE_ns1__SubmitScreenShot;
			return soap_in_ns1__SubmitScreenShot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitScreenShotResponse"))
		{	*type = SOAP_TYPE_ns1__SubmitScreenShotResponse;
			return soap_in_ns1__SubmitScreenShotResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NotifyStatus"))
		{	*type = SOAP_TYPE_ns1__NotifyStatus;
			return soap_in_ns1__NotifyStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NotifyStatusResponse"))
		{	*type = SOAP_TYPE_ns1__NotifyStatusResponse;
			return soap_in_ns1__NotifyStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResource"))
		{	*type = SOAP_TYPE_ns1__GetResource;
			return soap_in_ns1__GetResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetResourceResponse"))
		{	*type = SOAP_TYPE_ns1__GetResourceResponse;
			return soap_in_ns1__GetResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MediaInventory"))
		{	*type = SOAP_TYPE_ns1__MediaInventory;
			return soap_in_ns1__MediaInventory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MediaInventoryResponse"))
		{	*type = SOAP_TYPE_ns1__MediaInventoryResponse;
			return soap_in_ns1__MediaInventoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitStats"))
		{	*type = SOAP_TYPE_ns1__SubmitStats;
			return soap_in_ns1__SubmitStats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitStatsResponse"))
		{	*type = SOAP_TYPE_ns1__SubmitStatsResponse;
			return soap_in_ns1__SubmitStatsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitLog"))
		{	*type = SOAP_TYPE_ns1__SubmitLog;
			return soap_in_ns1__SubmitLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitLogResponse"))
		{	*type = SOAP_TYPE_ns1__SubmitLogResponse;
			return soap_in_ns1__SubmitLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BlackList"))
		{	*type = SOAP_TYPE_ns1__BlackList;
			return soap_in_ns1__BlackList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BlackListResponse"))
		{	*type = SOAP_TYPE_ns1__BlackListResponse;
			return soap_in_ns1__BlackListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Schedule"))
		{	*type = SOAP_TYPE_ns1__Schedule;
			return soap_in_ns1__Schedule(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ScheduleResponse"))
		{	*type = SOAP_TYPE_ns1__ScheduleResponse;
			return soap_in_ns1__ScheduleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetFile"))
		{	*type = SOAP_TYPE_ns1__GetFile;
			return soap_in_ns1__GetFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetFileResponse"))
		{	*type = SOAP_TYPE_ns1__GetFileResponse;
			return soap_in_ns1__GetFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequiredFiles"))
		{	*type = SOAP_TYPE_ns1__RequiredFiles;
			return soap_in_ns1__RequiredFiles(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RequiredFilesResponse"))
		{	*type = SOAP_TYPE_ns1__RequiredFilesResponse;
			return soap_in_ns1__RequiredFilesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterDisplay"))
		{	*type = SOAP_TYPE_ns1__RegisterDisplay;
			return soap_in_ns1__RegisterDisplay(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterDisplayResponse"))
		{	*type = SOAP_TYPE_ns1__RegisterDisplayResponse;
			return soap_in_ns1__RegisterDisplayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_ns1__SubmitScreenShot:
		return soap_out_ns1__SubmitScreenShot(soap, tag, id, (const struct ns1__SubmitScreenShot *)ptr, "ns1:SubmitScreenShot");
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		return soap_out_ns1__SubmitScreenShotResponse(soap, tag, id, (const struct ns1__SubmitScreenShotResponse *)ptr, "ns1:SubmitScreenShotResponse");
	case SOAP_TYPE_ns1__NotifyStatus:
		return soap_out_ns1__NotifyStatus(soap, tag, id, (const struct ns1__NotifyStatus *)ptr, "ns1:NotifyStatus");
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		return soap_out_ns1__NotifyStatusResponse(soap, tag, id, (const struct ns1__NotifyStatusResponse *)ptr, "ns1:NotifyStatusResponse");
	case SOAP_TYPE_ns1__GetResource:
		return soap_out_ns1__GetResource(soap, tag, id, (const struct ns1__GetResource *)ptr, "ns1:GetResource");
	case SOAP_TYPE_ns1__GetResourceResponse:
		return soap_out_ns1__GetResourceResponse(soap, tag, id, (const struct ns1__GetResourceResponse *)ptr, "ns1:GetResourceResponse");
	case SOAP_TYPE_ns1__MediaInventory:
		return soap_out_ns1__MediaInventory(soap, tag, id, (const struct ns1__MediaInventory *)ptr, "ns1:MediaInventory");
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		return soap_out_ns1__MediaInventoryResponse(soap, tag, id, (const struct ns1__MediaInventoryResponse *)ptr, "ns1:MediaInventoryResponse");
	case SOAP_TYPE_ns1__SubmitStats:
		return soap_out_ns1__SubmitStats(soap, tag, id, (const struct ns1__SubmitStats *)ptr, "ns1:SubmitStats");
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		return soap_out_ns1__SubmitStatsResponse(soap, tag, id, (const struct ns1__SubmitStatsResponse *)ptr, "ns1:SubmitStatsResponse");
	case SOAP_TYPE_ns1__SubmitLog:
		return soap_out_ns1__SubmitLog(soap, tag, id, (const struct ns1__SubmitLog *)ptr, "ns1:SubmitLog");
	case SOAP_TYPE_ns1__SubmitLogResponse:
		return soap_out_ns1__SubmitLogResponse(soap, tag, id, (const struct ns1__SubmitLogResponse *)ptr, "ns1:SubmitLogResponse");
	case SOAP_TYPE_ns1__BlackList:
		return soap_out_ns1__BlackList(soap, tag, id, (const struct ns1__BlackList *)ptr, "ns1:BlackList");
	case SOAP_TYPE_ns1__BlackListResponse:
		return soap_out_ns1__BlackListResponse(soap, tag, id, (const struct ns1__BlackListResponse *)ptr, "ns1:BlackListResponse");
	case SOAP_TYPE_ns1__Schedule:
		return soap_out_ns1__Schedule(soap, tag, id, (const struct ns1__Schedule *)ptr, "ns1:Schedule");
	case SOAP_TYPE_ns1__ScheduleResponse:
		return soap_out_ns1__ScheduleResponse(soap, tag, id, (const struct ns1__ScheduleResponse *)ptr, "ns1:ScheduleResponse");
	case SOAP_TYPE_ns1__GetFile:
		return soap_out_ns1__GetFile(soap, tag, id, (const struct ns1__GetFile *)ptr, "ns1:GetFile");
	case SOAP_TYPE_ns1__GetFileResponse:
		return soap_out_ns1__GetFileResponse(soap, tag, id, (const struct ns1__GetFileResponse *)ptr, "ns1:GetFileResponse");
	case SOAP_TYPE_ns1__RequiredFiles:
		return soap_out_ns1__RequiredFiles(soap, tag, id, (const struct ns1__RequiredFiles *)ptr, "ns1:RequiredFiles");
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		return soap_out_ns1__RequiredFilesResponse(soap, tag, id, (const struct ns1__RequiredFilesResponse *)ptr, "ns1:RequiredFilesResponse");
	case SOAP_TYPE_ns1__RegisterDisplay:
		return soap_out_ns1__RegisterDisplay(soap, tag, id, (const struct ns1__RegisterDisplay *)ptr, "ns1:RegisterDisplay");
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		return soap_out_ns1__RegisterDisplayResponse(soap, tag, id, (const struct ns1__RegisterDisplayResponse *)ptr, "ns1:RegisterDisplayResponse");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__SubmitScreenShot:
		soap_serialize_ns1__SubmitScreenShot(soap, (const struct ns1__SubmitScreenShot *)ptr);
		break;
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		soap_serialize_ns1__SubmitScreenShotResponse(soap, (const struct ns1__SubmitScreenShotResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__NotifyStatus:
		soap_serialize_ns1__NotifyStatus(soap, (const struct ns1__NotifyStatus *)ptr);
		break;
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		soap_serialize_ns1__NotifyStatusResponse(soap, (const struct ns1__NotifyStatusResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__GetResource:
		soap_serialize_ns1__GetResource(soap, (const struct ns1__GetResource *)ptr);
		break;
	case SOAP_TYPE_ns1__GetResourceResponse:
		soap_serialize_ns1__GetResourceResponse(soap, (const struct ns1__GetResourceResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__MediaInventory:
		soap_serialize_ns1__MediaInventory(soap, (const struct ns1__MediaInventory *)ptr);
		break;
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		soap_serialize_ns1__MediaInventoryResponse(soap, (const struct ns1__MediaInventoryResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__SubmitStats:
		soap_serialize_ns1__SubmitStats(soap, (const struct ns1__SubmitStats *)ptr);
		break;
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		soap_serialize_ns1__SubmitStatsResponse(soap, (const struct ns1__SubmitStatsResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__SubmitLog:
		soap_serialize_ns1__SubmitLog(soap, (const struct ns1__SubmitLog *)ptr);
		break;
	case SOAP_TYPE_ns1__SubmitLogResponse:
		soap_serialize_ns1__SubmitLogResponse(soap, (const struct ns1__SubmitLogResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__BlackList:
		soap_serialize_ns1__BlackList(soap, (const struct ns1__BlackList *)ptr);
		break;
	case SOAP_TYPE_ns1__BlackListResponse:
		soap_serialize_ns1__BlackListResponse(soap, (const struct ns1__BlackListResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__Schedule:
		soap_serialize_ns1__Schedule(soap, (const struct ns1__Schedule *)ptr);
		break;
	case SOAP_TYPE_ns1__ScheduleResponse:
		soap_serialize_ns1__ScheduleResponse(soap, (const struct ns1__ScheduleResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__GetFile:
		soap_serialize_ns1__GetFile(soap, (const struct ns1__GetFile *)ptr);
		break;
	case SOAP_TYPE_ns1__GetFileResponse:
		soap_serialize_ns1__GetFileResponse(soap, (const struct ns1__GetFileResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RequiredFiles:
		soap_serialize_ns1__RequiredFiles(soap, (const struct ns1__RequiredFiles *)ptr);
		break;
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		soap_serialize_ns1__RequiredFilesResponse(soap, (const struct ns1__RequiredFilesResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__RegisterDisplay:
		soap_serialize_ns1__RegisterDisplay(soap, (const struct ns1__RegisterDisplay *)ptr);
		break;
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		soap_serialize_ns1__RegisterDisplayResponse(soap, (const struct ns1__RegisterDisplayResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		return (void*)soap_instantiate_ns1__RegisterDisplayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RegisterDisplay:
		return (void*)soap_instantiate_ns1__RegisterDisplay(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		return (void*)soap_instantiate_ns1__RequiredFilesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RequiredFiles:
		return (void*)soap_instantiate_ns1__RequiredFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GetFileResponse:
		return (void*)soap_instantiate_ns1__GetFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GetFile:
		return (void*)soap_instantiate_ns1__GetFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ScheduleResponse:
		return (void*)soap_instantiate_ns1__ScheduleResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Schedule:
		return (void*)soap_instantiate_ns1__Schedule(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__BlackListResponse:
		return (void*)soap_instantiate_ns1__BlackListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__BlackList:
		return (void*)soap_instantiate_ns1__BlackList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitLogResponse:
		return (void*)soap_instantiate_ns1__SubmitLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitLog:
		return (void*)soap_instantiate_ns1__SubmitLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		return (void*)soap_instantiate_ns1__SubmitStatsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitStats:
		return (void*)soap_instantiate_ns1__SubmitStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		return (void*)soap_instantiate_ns1__MediaInventoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MediaInventory:
		return (void*)soap_instantiate_ns1__MediaInventory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GetResourceResponse:
		return (void*)soap_instantiate_ns1__GetResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GetResource:
		return (void*)soap_instantiate_ns1__GetResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		return (void*)soap_instantiate_ns1__NotifyStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NotifyStatus:
		return (void*)soap_instantiate_ns1__NotifyStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		return (void*)soap_instantiate_ns1__SubmitScreenShotResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SubmitScreenShot:
		return (void*)soap_instantiate_ns1__SubmitScreenShot(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__RegisterDisplayResponse*>(p->ptr), struct ns1__RegisterDisplayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__RegisterDisplayResponse*>(p->ptr), struct ns1__RegisterDisplayResponse);
		break;
	case SOAP_TYPE_ns1__RegisterDisplay:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__RegisterDisplay*>(p->ptr), struct ns1__RegisterDisplay);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__RegisterDisplay*>(p->ptr), struct ns1__RegisterDisplay);
		break;
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__RequiredFilesResponse*>(p->ptr), struct ns1__RequiredFilesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__RequiredFilesResponse*>(p->ptr), struct ns1__RequiredFilesResponse);
		break;
	case SOAP_TYPE_ns1__RequiredFiles:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__RequiredFiles*>(p->ptr), struct ns1__RequiredFiles);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__RequiredFiles*>(p->ptr), struct ns1__RequiredFiles);
		break;
	case SOAP_TYPE_ns1__GetFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__GetFileResponse*>(p->ptr), struct ns1__GetFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__GetFileResponse*>(p->ptr), struct ns1__GetFileResponse);
		break;
	case SOAP_TYPE_ns1__GetFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__GetFile*>(p->ptr), struct ns1__GetFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__GetFile*>(p->ptr), struct ns1__GetFile);
		break;
	case SOAP_TYPE_ns1__ScheduleResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__ScheduleResponse*>(p->ptr), struct ns1__ScheduleResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__ScheduleResponse*>(p->ptr), struct ns1__ScheduleResponse);
		break;
	case SOAP_TYPE_ns1__Schedule:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__Schedule*>(p->ptr), struct ns1__Schedule);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__Schedule*>(p->ptr), struct ns1__Schedule);
		break;
	case SOAP_TYPE_ns1__BlackListResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__BlackListResponse*>(p->ptr), struct ns1__BlackListResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__BlackListResponse*>(p->ptr), struct ns1__BlackListResponse);
		break;
	case SOAP_TYPE_ns1__BlackList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__BlackList*>(p->ptr), struct ns1__BlackList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__BlackList*>(p->ptr), struct ns1__BlackList);
		break;
	case SOAP_TYPE_ns1__SubmitLogResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitLogResponse*>(p->ptr), struct ns1__SubmitLogResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitLogResponse*>(p->ptr), struct ns1__SubmitLogResponse);
		break;
	case SOAP_TYPE_ns1__SubmitLog:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitLog*>(p->ptr), struct ns1__SubmitLog);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitLog*>(p->ptr), struct ns1__SubmitLog);
		break;
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitStatsResponse*>(p->ptr), struct ns1__SubmitStatsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitStatsResponse*>(p->ptr), struct ns1__SubmitStatsResponse);
		break;
	case SOAP_TYPE_ns1__SubmitStats:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitStats*>(p->ptr), struct ns1__SubmitStats);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitStats*>(p->ptr), struct ns1__SubmitStats);
		break;
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__MediaInventoryResponse*>(p->ptr), struct ns1__MediaInventoryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__MediaInventoryResponse*>(p->ptr), struct ns1__MediaInventoryResponse);
		break;
	case SOAP_TYPE_ns1__MediaInventory:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__MediaInventory*>(p->ptr), struct ns1__MediaInventory);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__MediaInventory*>(p->ptr), struct ns1__MediaInventory);
		break;
	case SOAP_TYPE_ns1__GetResourceResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__GetResourceResponse*>(p->ptr), struct ns1__GetResourceResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__GetResourceResponse*>(p->ptr), struct ns1__GetResourceResponse);
		break;
	case SOAP_TYPE_ns1__GetResource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__GetResource*>(p->ptr), struct ns1__GetResource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__GetResource*>(p->ptr), struct ns1__GetResource);
		break;
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__NotifyStatusResponse*>(p->ptr), struct ns1__NotifyStatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__NotifyStatusResponse*>(p->ptr), struct ns1__NotifyStatusResponse);
		break;
	case SOAP_TYPE_ns1__NotifyStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__NotifyStatus*>(p->ptr), struct ns1__NotifyStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__NotifyStatus*>(p->ptr), struct ns1__NotifyStatus);
		break;
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitScreenShotResponse*>(p->ptr), struct ns1__SubmitScreenShotResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitScreenShotResponse*>(p->ptr), struct ns1__SubmitScreenShotResponse);
		break;
	case SOAP_TYPE_ns1__SubmitScreenShot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__SubmitScreenShot*>(p->ptr), struct ns1__SubmitScreenShot);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__SubmitScreenShot*>(p->ptr), struct ns1__SubmitScreenShot);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__RegisterDisplayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__RegisterDisplayResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__RegisterDisplayResponse*)p = *(struct ns1__RegisterDisplayResponse*)q;
		break;
	case SOAP_TYPE_ns1__RegisterDisplay:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__RegisterDisplay type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__RegisterDisplay*)p = *(struct ns1__RegisterDisplay*)q;
		break;
	case SOAP_TYPE_ns1__RequiredFilesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__RequiredFilesResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__RequiredFilesResponse*)p = *(struct ns1__RequiredFilesResponse*)q;
		break;
	case SOAP_TYPE_ns1__RequiredFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__RequiredFiles type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__RequiredFiles*)p = *(struct ns1__RequiredFiles*)q;
		break;
	case SOAP_TYPE_ns1__GetFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__GetFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__GetFileResponse*)p = *(struct ns1__GetFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__GetFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__GetFile type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__GetFile*)p = *(struct ns1__GetFile*)q;
		break;
	case SOAP_TYPE_ns1__ScheduleResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__ScheduleResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__ScheduleResponse*)p = *(struct ns1__ScheduleResponse*)q;
		break;
	case SOAP_TYPE_ns1__Schedule:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__Schedule type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__Schedule*)p = *(struct ns1__Schedule*)q;
		break;
	case SOAP_TYPE_ns1__BlackListResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__BlackListResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__BlackListResponse*)p = *(struct ns1__BlackListResponse*)q;
		break;
	case SOAP_TYPE_ns1__BlackList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__BlackList type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__BlackList*)p = *(struct ns1__BlackList*)q;
		break;
	case SOAP_TYPE_ns1__SubmitLogResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitLogResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitLogResponse*)p = *(struct ns1__SubmitLogResponse*)q;
		break;
	case SOAP_TYPE_ns1__SubmitLog:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitLog type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitLog*)p = *(struct ns1__SubmitLog*)q;
		break;
	case SOAP_TYPE_ns1__SubmitStatsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitStatsResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitStatsResponse*)p = *(struct ns1__SubmitStatsResponse*)q;
		break;
	case SOAP_TYPE_ns1__SubmitStats:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitStats type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitStats*)p = *(struct ns1__SubmitStats*)q;
		break;
	case SOAP_TYPE_ns1__MediaInventoryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__MediaInventoryResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__MediaInventoryResponse*)p = *(struct ns1__MediaInventoryResponse*)q;
		break;
	case SOAP_TYPE_ns1__MediaInventory:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__MediaInventory type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__MediaInventory*)p = *(struct ns1__MediaInventory*)q;
		break;
	case SOAP_TYPE_ns1__GetResourceResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__GetResourceResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__GetResourceResponse*)p = *(struct ns1__GetResourceResponse*)q;
		break;
	case SOAP_TYPE_ns1__GetResource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__GetResource type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__GetResource*)p = *(struct ns1__GetResource*)q;
		break;
	case SOAP_TYPE_ns1__NotifyStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__NotifyStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__NotifyStatusResponse*)p = *(struct ns1__NotifyStatusResponse*)q;
		break;
	case SOAP_TYPE_ns1__NotifyStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__NotifyStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__NotifyStatus*)p = *(struct ns1__NotifyStatus*)q;
		break;
	case SOAP_TYPE_ns1__SubmitScreenShotResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitScreenShotResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitScreenShotResponse*)p = *(struct ns1__SubmitScreenShotResponse*)q;
		break;
	case SOAP_TYPE_ns1__SubmitScreenShot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__SubmitScreenShot type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__SubmitScreenShot*)p = *(struct ns1__SubmitScreenShot*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitScreenShot(struct soap *soap, struct ns1__SubmitScreenShot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	a->screenShot.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitScreenShot(struct soap *soap, const struct ns1__SubmitScreenShot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	a->screenShot.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScreenShot(struct soap *soap, const char *tag, int id, const struct ns1__SubmitScreenShot *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitScreenShot), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (a->screenShot.soap_out(soap, "screenShot", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitScreenShot * SOAP_FMAC4 soap_in_ns1__SubmitScreenShot(struct soap *soap, const char *tag, struct ns1__SubmitScreenShot *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_screenShot = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitScreenShot *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitScreenShot, sizeof(struct ns1__SubmitScreenShot), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitScreenShot(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_screenShot && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->screenShot.soap_in(soap, "screenShot", "xsd:base64Binary"))
				{	soap_flag_screenShot--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_screenShot > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitScreenShot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitScreenShot, SOAP_TYPE_ns1__SubmitScreenShot, sizeof(struct ns1__SubmitScreenShot), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitScreenShot * SOAP_FMAC2 soap_instantiate_ns1__SubmitScreenShot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitScreenShot(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitScreenShot *p;
	size_t k = sizeof(struct ns1__SubmitScreenShot);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitScreenShot, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitScreenShot);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitScreenShot, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitScreenShot location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitScreenShot(struct soap *soap, const struct ns1__SubmitScreenShot *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitScreenShot(soap, tag ? tag : "ns1:SubmitScreenShot", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitScreenShot * SOAP_FMAC4 soap_get_ns1__SubmitScreenShot(struct soap *soap, struct ns1__SubmitScreenShot *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitScreenShot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitScreenShotResponse(struct soap *soap, struct ns1__SubmitScreenShotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitScreenShotResponse(struct soap *soap, const struct ns1__SubmitScreenShotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScreenShotResponse(struct soap *soap, const char *tag, int id, const struct ns1__SubmitScreenShotResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitScreenShotResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitScreenShotResponse * SOAP_FMAC4 soap_in_ns1__SubmitScreenShotResponse(struct soap *soap, const char *tag, struct ns1__SubmitScreenShotResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitScreenShotResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitScreenShotResponse, sizeof(struct ns1__SubmitScreenShotResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitScreenShotResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitScreenShotResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitScreenShotResponse, SOAP_TYPE_ns1__SubmitScreenShotResponse, sizeof(struct ns1__SubmitScreenShotResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitScreenShotResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitScreenShotResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitScreenShotResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitScreenShotResponse *p;
	size_t k = sizeof(struct ns1__SubmitScreenShotResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitScreenShotResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitScreenShotResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitScreenShotResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitScreenShotResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitScreenShotResponse(struct soap *soap, const struct ns1__SubmitScreenShotResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitScreenShotResponse(soap, tag ? tag : "ns1:SubmitScreenShotResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitScreenShotResponse * SOAP_FMAC4 soap_get_ns1__SubmitScreenShotResponse(struct soap *soap, struct ns1__SubmitScreenShotResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitScreenShotResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NotifyStatus(struct soap *soap, struct ns1__NotifyStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_std__string(soap, &a->status);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NotifyStatus(struct soap *soap, const struct ns1__NotifyStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->status);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NotifyStatus(struct soap *soap, const char *tag, int id, const struct ns1__NotifyStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NotifyStatus), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "status", -1, &a->status, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NotifyStatus * SOAP_FMAC4 soap_in_ns1__NotifyStatus(struct soap *soap, const char *tag, struct ns1__NotifyStatus *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_status = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NotifyStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NotifyStatus, sizeof(struct ns1__NotifyStatus), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__NotifyStatus(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_status && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "status", &a->status, "xsd:string"))
				{	soap_flag_status--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_status > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__NotifyStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NotifyStatus, SOAP_TYPE_ns1__NotifyStatus, sizeof(struct ns1__NotifyStatus), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__NotifyStatus * SOAP_FMAC2 soap_instantiate_ns1__NotifyStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NotifyStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__NotifyStatus *p;
	size_t k = sizeof(struct ns1__NotifyStatus);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__NotifyStatus, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__NotifyStatus);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__NotifyStatus, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__NotifyStatus location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NotifyStatus(struct soap *soap, const struct ns1__NotifyStatus *a, const char *tag, const char *type)
{
	if (soap_out_ns1__NotifyStatus(soap, tag ? tag : "ns1:NotifyStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NotifyStatus * SOAP_FMAC4 soap_get_ns1__NotifyStatus(struct soap *soap, struct ns1__NotifyStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NotifyStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NotifyStatusResponse(struct soap *soap, struct ns1__NotifyStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NotifyStatusResponse(struct soap *soap, const struct ns1__NotifyStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NotifyStatusResponse(struct soap *soap, const char *tag, int id, const struct ns1__NotifyStatusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NotifyStatusResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NotifyStatusResponse * SOAP_FMAC4 soap_in_ns1__NotifyStatusResponse(struct soap *soap, const char *tag, struct ns1__NotifyStatusResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NotifyStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NotifyStatusResponse, sizeof(struct ns1__NotifyStatusResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__NotifyStatusResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__NotifyStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NotifyStatusResponse, SOAP_TYPE_ns1__NotifyStatusResponse, sizeof(struct ns1__NotifyStatusResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__NotifyStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__NotifyStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NotifyStatusResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__NotifyStatusResponse *p;
	size_t k = sizeof(struct ns1__NotifyStatusResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__NotifyStatusResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__NotifyStatusResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__NotifyStatusResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__NotifyStatusResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NotifyStatusResponse(struct soap *soap, const struct ns1__NotifyStatusResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__NotifyStatusResponse(soap, tag ? tag : "ns1:NotifyStatusResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NotifyStatusResponse * SOAP_FMAC4 soap_get_ns1__NotifyStatusResponse(struct soap *soap, struct ns1__NotifyStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NotifyStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetResource(struct soap *soap, struct ns1__GetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_int(soap, &a->layoutId);
	soap_default_std__string(soap, &a->regionId);
	soap_default_std__string(soap, &a->mediaId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetResource(struct soap *soap, const struct ns1__GetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->regionId);
	soap_serialize_std__string(soap, &a->mediaId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetResource(struct soap *soap, const char *tag, int id, const struct ns1__GetResource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GetResource), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_int(soap, "layoutId", -1, &a->layoutId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "regionId", -1, &a->regionId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "mediaId", -1, &a->mediaId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GetResource * SOAP_FMAC4 soap_in_ns1__GetResource(struct soap *soap, const char *tag, struct ns1__GetResource *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_layoutId = 1;
	size_t soap_flag_regionId = 1;
	size_t soap_flag_mediaId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GetResource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GetResource, sizeof(struct ns1__GetResource), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__GetResource(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_layoutId && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "layoutId", &a->layoutId, "xsd:int"))
				{	soap_flag_layoutId--;
					continue;
				}
			}
			if (soap_flag_regionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "regionId", &a->regionId, "xsd:string"))
				{	soap_flag_regionId--;
					continue;
				}
			}
			if (soap_flag_mediaId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "mediaId", &a->mediaId, "xsd:string"))
				{	soap_flag_mediaId--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_layoutId > 0 || soap_flag_regionId > 0 || soap_flag_mediaId > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__GetResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GetResource, SOAP_TYPE_ns1__GetResource, sizeof(struct ns1__GetResource), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__GetResource * SOAP_FMAC2 soap_instantiate_ns1__GetResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GetResource(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__GetResource *p;
	size_t k = sizeof(struct ns1__GetResource);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__GetResource, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__GetResource);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__GetResource, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__GetResource location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetResource(struct soap *soap, const struct ns1__GetResource *a, const char *tag, const char *type)
{
	if (soap_out_ns1__GetResource(soap, tag ? tag : "ns1:GetResource", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GetResource * SOAP_FMAC4 soap_get_ns1__GetResource(struct soap *soap, struct ns1__GetResource *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GetResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetResourceResponse(struct soap *soap, struct ns1__GetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->resource);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetResourceResponse(struct soap *soap, const struct ns1__GetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->resource);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetResourceResponse(struct soap *soap, const char *tag, int id, const struct ns1__GetResourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GetResourceResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "resource", -1, &a->resource, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GetResourceResponse * SOAP_FMAC4 soap_in_ns1__GetResourceResponse(struct soap *soap, const char *tag, struct ns1__GetResourceResponse *a, const char *type)
{
	size_t soap_flag_resource = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GetResourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GetResourceResponse, sizeof(struct ns1__GetResourceResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__GetResourceResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_resource && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "resource", &a->resource, "xsd:string"))
				{	soap_flag_resource--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_resource > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__GetResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GetResourceResponse, SOAP_TYPE_ns1__GetResourceResponse, sizeof(struct ns1__GetResourceResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__GetResourceResponse * SOAP_FMAC2 soap_instantiate_ns1__GetResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GetResourceResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__GetResourceResponse *p;
	size_t k = sizeof(struct ns1__GetResourceResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__GetResourceResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__GetResourceResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__GetResourceResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__GetResourceResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetResourceResponse(struct soap *soap, const struct ns1__GetResourceResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__GetResourceResponse(soap, tag ? tag : "ns1:GetResourceResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GetResourceResponse * SOAP_FMAC4 soap_get_ns1__GetResourceResponse(struct soap *soap, struct ns1__GetResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GetResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__MediaInventory(struct soap *soap, struct ns1__MediaInventory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_std__string(soap, &a->mediaInventory);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__MediaInventory(struct soap *soap, const struct ns1__MediaInventory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->mediaInventory);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaInventory(struct soap *soap, const char *tag, int id, const struct ns1__MediaInventory *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MediaInventory), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "mediaInventory", -1, &a->mediaInventory, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__MediaInventory * SOAP_FMAC4 soap_in_ns1__MediaInventory(struct soap *soap, const char *tag, struct ns1__MediaInventory *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_mediaInventory = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__MediaInventory *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MediaInventory, sizeof(struct ns1__MediaInventory), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__MediaInventory(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_mediaInventory && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "mediaInventory", &a->mediaInventory, "xsd:string"))
				{	soap_flag_mediaInventory--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_mediaInventory > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__MediaInventory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MediaInventory, SOAP_TYPE_ns1__MediaInventory, sizeof(struct ns1__MediaInventory), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__MediaInventory * SOAP_FMAC2 soap_instantiate_ns1__MediaInventory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MediaInventory(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__MediaInventory *p;
	size_t k = sizeof(struct ns1__MediaInventory);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MediaInventory, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__MediaInventory);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__MediaInventory, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__MediaInventory location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MediaInventory(struct soap *soap, const struct ns1__MediaInventory *a, const char *tag, const char *type)
{
	if (soap_out_ns1__MediaInventory(soap, tag ? tag : "ns1:MediaInventory", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__MediaInventory * SOAP_FMAC4 soap_get_ns1__MediaInventory(struct soap *soap, struct ns1__MediaInventory *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MediaInventory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__MediaInventoryResponse(struct soap *soap, struct ns1__MediaInventoryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__MediaInventoryResponse(struct soap *soap, const struct ns1__MediaInventoryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaInventoryResponse(struct soap *soap, const char *tag, int id, const struct ns1__MediaInventoryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MediaInventoryResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__MediaInventoryResponse * SOAP_FMAC4 soap_in_ns1__MediaInventoryResponse(struct soap *soap, const char *tag, struct ns1__MediaInventoryResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__MediaInventoryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MediaInventoryResponse, sizeof(struct ns1__MediaInventoryResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__MediaInventoryResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__MediaInventoryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MediaInventoryResponse, SOAP_TYPE_ns1__MediaInventoryResponse, sizeof(struct ns1__MediaInventoryResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__MediaInventoryResponse * SOAP_FMAC2 soap_instantiate_ns1__MediaInventoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MediaInventoryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__MediaInventoryResponse *p;
	size_t k = sizeof(struct ns1__MediaInventoryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MediaInventoryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__MediaInventoryResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__MediaInventoryResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__MediaInventoryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MediaInventoryResponse(struct soap *soap, const struct ns1__MediaInventoryResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__MediaInventoryResponse(soap, tag ? tag : "ns1:MediaInventoryResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__MediaInventoryResponse * SOAP_FMAC4 soap_get_ns1__MediaInventoryResponse(struct soap *soap, struct ns1__MediaInventoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MediaInventoryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitStats(struct soap *soap, struct ns1__SubmitStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_std__string(soap, &a->statXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitStats(struct soap *soap, const struct ns1__SubmitStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->statXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitStats(struct soap *soap, const char *tag, int id, const struct ns1__SubmitStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitStats), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "statXml", -1, &a->statXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitStats * SOAP_FMAC4 soap_in_ns1__SubmitStats(struct soap *soap, const char *tag, struct ns1__SubmitStats *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_statXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitStats *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitStats, sizeof(struct ns1__SubmitStats), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitStats(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_statXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "statXml", &a->statXml, "xsd:string"))
				{	soap_flag_statXml--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_statXml > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitStats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitStats, SOAP_TYPE_ns1__SubmitStats, sizeof(struct ns1__SubmitStats), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitStats * SOAP_FMAC2 soap_instantiate_ns1__SubmitStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitStats(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitStats *p;
	size_t k = sizeof(struct ns1__SubmitStats);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitStats, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitStats);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitStats, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitStats location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitStats(struct soap *soap, const struct ns1__SubmitStats *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitStats(soap, tag ? tag : "ns1:SubmitStats", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitStats * SOAP_FMAC4 soap_get_ns1__SubmitStats(struct soap *soap, struct ns1__SubmitStats *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitStatsResponse(struct soap *soap, struct ns1__SubmitStatsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitStatsResponse(struct soap *soap, const struct ns1__SubmitStatsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitStatsResponse(struct soap *soap, const char *tag, int id, const struct ns1__SubmitStatsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitStatsResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitStatsResponse * SOAP_FMAC4 soap_in_ns1__SubmitStatsResponse(struct soap *soap, const char *tag, struct ns1__SubmitStatsResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitStatsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitStatsResponse, sizeof(struct ns1__SubmitStatsResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitStatsResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitStatsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitStatsResponse, SOAP_TYPE_ns1__SubmitStatsResponse, sizeof(struct ns1__SubmitStatsResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitStatsResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitStatsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitStatsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitStatsResponse *p;
	size_t k = sizeof(struct ns1__SubmitStatsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitStatsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitStatsResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitStatsResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitStatsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitStatsResponse(struct soap *soap, const struct ns1__SubmitStatsResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitStatsResponse(soap, tag ? tag : "ns1:SubmitStatsResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitStatsResponse * SOAP_FMAC4 soap_get_ns1__SubmitStatsResponse(struct soap *soap, struct ns1__SubmitStatsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitStatsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitLog(struct soap *soap, struct ns1__SubmitLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_std__string(soap, &a->logXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitLog(struct soap *soap, const struct ns1__SubmitLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->logXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitLog(struct soap *soap, const char *tag, int id, const struct ns1__SubmitLog *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitLog), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "logXml", -1, &a->logXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitLog * SOAP_FMAC4 soap_in_ns1__SubmitLog(struct soap *soap, const char *tag, struct ns1__SubmitLog *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_logXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitLog *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitLog, sizeof(struct ns1__SubmitLog), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitLog(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_logXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "logXml", &a->logXml, "xsd:string"))
				{	soap_flag_logXml--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_logXml > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitLog, SOAP_TYPE_ns1__SubmitLog, sizeof(struct ns1__SubmitLog), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitLog * SOAP_FMAC2 soap_instantiate_ns1__SubmitLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitLog(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitLog *p;
	size_t k = sizeof(struct ns1__SubmitLog);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitLog, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitLog);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitLog, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitLog location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitLog(struct soap *soap, const struct ns1__SubmitLog *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitLog(soap, tag ? tag : "ns1:SubmitLog", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitLog * SOAP_FMAC4 soap_get_ns1__SubmitLog(struct soap *soap, struct ns1__SubmitLog *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubmitLogResponse(struct soap *soap, struct ns1__SubmitLogResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubmitLogResponse(struct soap *soap, const struct ns1__SubmitLogResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitLogResponse(struct soap *soap, const char *tag, int id, const struct ns1__SubmitLogResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SubmitLogResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__SubmitLogResponse * SOAP_FMAC4 soap_in_ns1__SubmitLogResponse(struct soap *soap, const char *tag, struct ns1__SubmitLogResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__SubmitLogResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SubmitLogResponse, sizeof(struct ns1__SubmitLogResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__SubmitLogResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__SubmitLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SubmitLogResponse, SOAP_TYPE_ns1__SubmitLogResponse, sizeof(struct ns1__SubmitLogResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__SubmitLogResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubmitLogResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__SubmitLogResponse *p;
	size_t k = sizeof(struct ns1__SubmitLogResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__SubmitLogResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__SubmitLogResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__SubmitLogResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__SubmitLogResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubmitLogResponse(struct soap *soap, const struct ns1__SubmitLogResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SubmitLogResponse(soap, tag ? tag : "ns1:SubmitLogResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__SubmitLogResponse * SOAP_FMAC4 soap_get_ns1__SubmitLogResponse(struct soap *soap, struct ns1__SubmitLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubmitLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__BlackList(struct soap *soap, struct ns1__BlackList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_int(soap, &a->mediaId);
	soap_default_std__string(soap, &a->type);
	soap_default_std__string(soap, &a->reason);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__BlackList(struct soap *soap, const struct ns1__BlackList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->type);
	soap_serialize_std__string(soap, &a->reason);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BlackList(struct soap *soap, const char *tag, int id, const struct ns1__BlackList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__BlackList), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_int(soap, "mediaId", -1, &a->mediaId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_std__string(soap, "reason", -1, &a->reason, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__BlackList * SOAP_FMAC4 soap_in_ns1__BlackList(struct soap *soap, const char *tag, struct ns1__BlackList *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_mediaId = 1;
	size_t soap_flag_type = 1;
	size_t soap_flag_reason = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__BlackList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__BlackList, sizeof(struct ns1__BlackList), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__BlackList(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_mediaId && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "mediaId", &a->mediaId, "xsd:int"))
				{	soap_flag_mediaId--;
					continue;
				}
			}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			}
			if (soap_flag_reason && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_mediaId > 0 || soap_flag_type > 0 || soap_flag_reason > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__BlackList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__BlackList, SOAP_TYPE_ns1__BlackList, sizeof(struct ns1__BlackList), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__BlackList * SOAP_FMAC2 soap_instantiate_ns1__BlackList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__BlackList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__BlackList *p;
	size_t k = sizeof(struct ns1__BlackList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__BlackList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__BlackList);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__BlackList, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__BlackList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BlackList(struct soap *soap, const struct ns1__BlackList *a, const char *tag, const char *type)
{
	if (soap_out_ns1__BlackList(soap, tag ? tag : "ns1:BlackList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__BlackList * SOAP_FMAC4 soap_get_ns1__BlackList(struct soap *soap, struct ns1__BlackList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__BlackList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__BlackListResponse(struct soap *soap, struct ns1__BlackListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->success);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__BlackListResponse(struct soap *soap, const struct ns1__BlackListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BlackListResponse(struct soap *soap, const char *tag, int id, const struct ns1__BlackListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__BlackListResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "success", -1, &a->success, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__BlackListResponse * SOAP_FMAC4 soap_in_ns1__BlackListResponse(struct soap *soap, const char *tag, struct ns1__BlackListResponse *a, const char *type)
{
	size_t soap_flag_success = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__BlackListResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__BlackListResponse, sizeof(struct ns1__BlackListResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__BlackListResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_success && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "success", &a->success, "xsd:boolean"))
				{	soap_flag_success--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_success > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__BlackListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__BlackListResponse, SOAP_TYPE_ns1__BlackListResponse, sizeof(struct ns1__BlackListResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__BlackListResponse * SOAP_FMAC2 soap_instantiate_ns1__BlackListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__BlackListResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__BlackListResponse *p;
	size_t k = sizeof(struct ns1__BlackListResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__BlackListResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__BlackListResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__BlackListResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__BlackListResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BlackListResponse(struct soap *soap, const struct ns1__BlackListResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__BlackListResponse(soap, tag ? tag : "ns1:BlackListResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__BlackListResponse * SOAP_FMAC4 soap_get_ns1__BlackListResponse(struct soap *soap, struct ns1__BlackListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__BlackListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__Schedule(struct soap *soap, struct ns1__Schedule *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Schedule(struct soap *soap, const struct ns1__Schedule *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Schedule(struct soap *soap, const char *tag, int id, const struct ns1__Schedule *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Schedule), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__Schedule * SOAP_FMAC4 soap_in_ns1__Schedule(struct soap *soap, const char *tag, struct ns1__Schedule *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__Schedule *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Schedule, sizeof(struct ns1__Schedule), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__Schedule(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__Schedule *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Schedule, SOAP_TYPE_ns1__Schedule, sizeof(struct ns1__Schedule), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__Schedule * SOAP_FMAC2 soap_instantiate_ns1__Schedule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Schedule(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__Schedule *p;
	size_t k = sizeof(struct ns1__Schedule);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Schedule, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__Schedule);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__Schedule, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__Schedule location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Schedule(struct soap *soap, const struct ns1__Schedule *a, const char *tag, const char *type)
{
	if (soap_out_ns1__Schedule(soap, tag ? tag : "ns1:Schedule", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__Schedule * SOAP_FMAC4 soap_get_ns1__Schedule(struct soap *soap, struct ns1__Schedule *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Schedule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ScheduleResponse(struct soap *soap, struct ns1__ScheduleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ScheduleXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ScheduleResponse(struct soap *soap, const struct ns1__ScheduleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->ScheduleXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduleResponse(struct soap *soap, const char *tag, int id, const struct ns1__ScheduleResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ScheduleResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "ScheduleXml", -1, &a->ScheduleXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__ScheduleResponse * SOAP_FMAC4 soap_in_ns1__ScheduleResponse(struct soap *soap, const char *tag, struct ns1__ScheduleResponse *a, const char *type)
{
	size_t soap_flag_ScheduleXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__ScheduleResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ScheduleResponse, sizeof(struct ns1__ScheduleResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__ScheduleResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ScheduleXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ScheduleXml", &a->ScheduleXml, "xsd:string"))
				{	soap_flag_ScheduleXml--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ScheduleXml > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__ScheduleResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ScheduleResponse, SOAP_TYPE_ns1__ScheduleResponse, sizeof(struct ns1__ScheduleResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__ScheduleResponse * SOAP_FMAC2 soap_instantiate_ns1__ScheduleResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ScheduleResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__ScheduleResponse *p;
	size_t k = sizeof(struct ns1__ScheduleResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__ScheduleResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__ScheduleResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__ScheduleResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__ScheduleResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ScheduleResponse(struct soap *soap, const struct ns1__ScheduleResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__ScheduleResponse(soap, tag ? tag : "ns1:ScheduleResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__ScheduleResponse * SOAP_FMAC4 soap_get_ns1__ScheduleResponse(struct soap *soap, struct ns1__ScheduleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ScheduleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetFile(struct soap *soap, struct ns1__GetFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_int(soap, &a->fileId);
	soap_default_std__string(soap, &a->fileType);
	soap_default_double(soap, &a->chunkOffset);
	soap_default_double(soap, &a->chuckSize);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetFile(struct soap *soap, const struct ns1__GetFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->fileType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFile(struct soap *soap, const char *tag, int id, const struct ns1__GetFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GetFile), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_int(soap, "fileId", -1, &a->fileId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "fileType", -1, &a->fileType, ""))
		return soap->error;
	if (soap_out_double(soap, "chunkOffset", -1, &a->chunkOffset, ""))
		return soap->error;
	if (soap_out_double(soap, "chuckSize", -1, &a->chuckSize, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GetFile * SOAP_FMAC4 soap_in_ns1__GetFile(struct soap *soap, const char *tag, struct ns1__GetFile *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_fileId = 1;
	size_t soap_flag_fileType = 1;
	size_t soap_flag_chunkOffset = 1;
	size_t soap_flag_chuckSize = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GetFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GetFile, sizeof(struct ns1__GetFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__GetFile(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_fileId && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "fileId", &a->fileId, "xsd:int"))
				{	soap_flag_fileId--;
					continue;
				}
			}
			if (soap_flag_fileType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "fileType", &a->fileType, "xsd:string"))
				{	soap_flag_fileType--;
					continue;
				}
			}
			if (soap_flag_chunkOffset && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "chunkOffset", &a->chunkOffset, "xsd:double"))
				{	soap_flag_chunkOffset--;
					continue;
				}
			}
			if (soap_flag_chuckSize && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "chuckSize", &a->chuckSize, "xsd:double"))
				{	soap_flag_chuckSize--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_fileId > 0 || soap_flag_fileType > 0 || soap_flag_chunkOffset > 0 || soap_flag_chuckSize > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__GetFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GetFile, SOAP_TYPE_ns1__GetFile, sizeof(struct ns1__GetFile), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__GetFile * SOAP_FMAC2 soap_instantiate_ns1__GetFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GetFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__GetFile *p;
	size_t k = sizeof(struct ns1__GetFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__GetFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__GetFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__GetFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__GetFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetFile(struct soap *soap, const struct ns1__GetFile *a, const char *tag, const char *type)
{
	if (soap_out_ns1__GetFile(soap, tag ? tag : "ns1:GetFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GetFile * SOAP_FMAC4 soap_get_ns1__GetFile(struct soap *soap, struct ns1__GetFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GetFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetFileResponse(struct soap *soap, struct ns1__GetFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->file.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetFileResponse(struct soap *soap, const struct ns1__GetFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->file.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFileResponse(struct soap *soap, const char *tag, int id, const struct ns1__GetFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GetFileResponse), type))
		return soap->error;
	if (a->file.soap_out(soap, "file", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GetFileResponse * SOAP_FMAC4 soap_in_ns1__GetFileResponse(struct soap *soap, const char *tag, struct ns1__GetFileResponse *a, const char *type)
{
	size_t soap_flag_file = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GetFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GetFileResponse, sizeof(struct ns1__GetFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__GetFileResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_file && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->file.soap_in(soap, "file", "xsd:base64Binary"))
				{	soap_flag_file--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_file > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__GetFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GetFileResponse, SOAP_TYPE_ns1__GetFileResponse, sizeof(struct ns1__GetFileResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__GetFileResponse * SOAP_FMAC2 soap_instantiate_ns1__GetFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GetFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__GetFileResponse *p;
	size_t k = sizeof(struct ns1__GetFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__GetFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__GetFileResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__GetFileResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__GetFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetFileResponse(struct soap *soap, const struct ns1__GetFileResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__GetFileResponse(soap, tag ? tag : "ns1:GetFileResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GetFileResponse * SOAP_FMAC4 soap_get_ns1__GetFileResponse(struct soap *soap, struct ns1__GetFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GetFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequiredFiles(struct soap *soap, struct ns1__RequiredFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequiredFiles(struct soap *soap, const struct ns1__RequiredFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequiredFiles(struct soap *soap, const char *tag, int id, const struct ns1__RequiredFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequiredFiles), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequiredFiles * SOAP_FMAC4 soap_in_ns1__RequiredFiles(struct soap *soap, const char *tag, struct ns1__RequiredFiles *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequiredFiles *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequiredFiles, sizeof(struct ns1__RequiredFiles), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__RequiredFiles(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__RequiredFiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequiredFiles, SOAP_TYPE_ns1__RequiredFiles, sizeof(struct ns1__RequiredFiles), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__RequiredFiles * SOAP_FMAC2 soap_instantiate_ns1__RequiredFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequiredFiles(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__RequiredFiles *p;
	size_t k = sizeof(struct ns1__RequiredFiles);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RequiredFiles, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__RequiredFiles);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__RequiredFiles, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__RequiredFiles location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequiredFiles(struct soap *soap, const struct ns1__RequiredFiles *a, const char *tag, const char *type)
{
	if (soap_out_ns1__RequiredFiles(soap, tag ? tag : "ns1:RequiredFiles", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__RequiredFiles * SOAP_FMAC4 soap_get_ns1__RequiredFiles(struct soap *soap, struct ns1__RequiredFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequiredFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RequiredFilesResponse(struct soap *soap, struct ns1__RequiredFilesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->RequiredFilesXml);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RequiredFilesResponse(struct soap *soap, const struct ns1__RequiredFilesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->RequiredFilesXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RequiredFilesResponse(struct soap *soap, const char *tag, int id, const struct ns1__RequiredFilesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RequiredFilesResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "RequiredFilesXml", -1, &a->RequiredFilesXml, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RequiredFilesResponse * SOAP_FMAC4 soap_in_ns1__RequiredFilesResponse(struct soap *soap, const char *tag, struct ns1__RequiredFilesResponse *a, const char *type)
{
	size_t soap_flag_RequiredFilesXml = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RequiredFilesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RequiredFilesResponse, sizeof(struct ns1__RequiredFilesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__RequiredFilesResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RequiredFilesXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "RequiredFilesXml", &a->RequiredFilesXml, "xsd:string"))
				{	soap_flag_RequiredFilesXml--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RequiredFilesXml > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__RequiredFilesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RequiredFilesResponse, SOAP_TYPE_ns1__RequiredFilesResponse, sizeof(struct ns1__RequiredFilesResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__RequiredFilesResponse * SOAP_FMAC2 soap_instantiate_ns1__RequiredFilesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RequiredFilesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__RequiredFilesResponse *p;
	size_t k = sizeof(struct ns1__RequiredFilesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RequiredFilesResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__RequiredFilesResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__RequiredFilesResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__RequiredFilesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RequiredFilesResponse(struct soap *soap, const struct ns1__RequiredFilesResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__RequiredFilesResponse(soap, tag ? tag : "ns1:RequiredFilesResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__RequiredFilesResponse * SOAP_FMAC4 soap_get_ns1__RequiredFilesResponse(struct soap *soap, struct ns1__RequiredFilesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RequiredFilesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterDisplay(struct soap *soap, struct ns1__RegisterDisplay *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->serverKey);
	soap_default_std__string(soap, &a->hardwareKey);
	soap_default_std__string(soap, &a->displayName);
	soap_default_std__string(soap, &a->clientType);
	soap_default_std__string(soap, &a->clientVersion);
	soap_default_int(soap, &a->clientCode);
	soap_default_std__string(soap, &a->operatingSystem);
	soap_default_std__string(soap, &a->macAddress);
	soap_default_std__string(soap, &a->xmrChannel);
	soap_default_std__string(soap, &a->xmrPubKey);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterDisplay(struct soap *soap, const struct ns1__RegisterDisplay *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->serverKey);
	soap_serialize_std__string(soap, &a->hardwareKey);
	soap_serialize_std__string(soap, &a->displayName);
	soap_serialize_std__string(soap, &a->clientType);
	soap_serialize_std__string(soap, &a->clientVersion);
	soap_serialize_std__string(soap, &a->operatingSystem);
	soap_serialize_std__string(soap, &a->macAddress);
	soap_serialize_std__string(soap, &a->xmrChannel);
	soap_serialize_std__string(soap, &a->xmrPubKey);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterDisplay(struct soap *soap, const char *tag, int id, const struct ns1__RegisterDisplay *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RegisterDisplay), type))
		return soap->error;
	if (soap_out_std__string(soap, "serverKey", -1, &a->serverKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hardwareKey", -1, &a->hardwareKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "displayName", -1, &a->displayName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clientType", -1, &a->clientType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "clientVersion", -1, &a->clientVersion, ""))
		return soap->error;
	if (soap_out_int(soap, "clientCode", -1, &a->clientCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "operatingSystem", -1, &a->operatingSystem, ""))
		return soap->error;
	if (soap_out_std__string(soap, "macAddress", -1, &a->macAddress, ""))
		return soap->error;
	if (soap_out_std__string(soap, "xmrChannel", -1, &a->xmrChannel, ""))
		return soap->error;
	if (soap_out_std__string(soap, "xmrPubKey", -1, &a->xmrPubKey, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RegisterDisplay * SOAP_FMAC4 soap_in_ns1__RegisterDisplay(struct soap *soap, const char *tag, struct ns1__RegisterDisplay *a, const char *type)
{
	size_t soap_flag_serverKey = 1;
	size_t soap_flag_hardwareKey = 1;
	size_t soap_flag_displayName = 1;
	size_t soap_flag_clientType = 1;
	size_t soap_flag_clientVersion = 1;
	size_t soap_flag_clientCode = 1;
	size_t soap_flag_operatingSystem = 1;
	size_t soap_flag_macAddress = 1;
	size_t soap_flag_xmrChannel = 1;
	size_t soap_flag_xmrPubKey = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RegisterDisplay *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RegisterDisplay, sizeof(struct ns1__RegisterDisplay), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__RegisterDisplay(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "serverKey", &a->serverKey, "xsd:string"))
				{	soap_flag_serverKey--;
					continue;
				}
			}
			if (soap_flag_hardwareKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "hardwareKey", &a->hardwareKey, "xsd:string"))
				{	soap_flag_hardwareKey--;
					continue;
				}
			}
			if (soap_flag_displayName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "displayName", &a->displayName, "xsd:string"))
				{	soap_flag_displayName--;
					continue;
				}
			}
			if (soap_flag_clientType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "clientType", &a->clientType, "xsd:string"))
				{	soap_flag_clientType--;
					continue;
				}
			}
			if (soap_flag_clientVersion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "clientVersion", &a->clientVersion, "xsd:string"))
				{	soap_flag_clientVersion--;
					continue;
				}
			}
			if (soap_flag_clientCode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "clientCode", &a->clientCode, "xsd:int"))
				{	soap_flag_clientCode--;
					continue;
				}
			}
			if (soap_flag_operatingSystem && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "operatingSystem", &a->operatingSystem, "xsd:string"))
				{	soap_flag_operatingSystem--;
					continue;
				}
			}
			if (soap_flag_macAddress && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "macAddress", &a->macAddress, "xsd:string"))
				{	soap_flag_macAddress--;
					continue;
				}
			}
			if (soap_flag_xmrChannel && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "xmrChannel", &a->xmrChannel, "xsd:string"))
				{	soap_flag_xmrChannel--;
					continue;
				}
			}
			if (soap_flag_xmrPubKey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "xmrPubKey", &a->xmrPubKey, "xsd:string"))
				{	soap_flag_xmrPubKey--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverKey > 0 || soap_flag_hardwareKey > 0 || soap_flag_displayName > 0 || soap_flag_clientType > 0 || soap_flag_clientVersion > 0 || soap_flag_clientCode > 0 || soap_flag_operatingSystem > 0 || soap_flag_macAddress > 0 || soap_flag_xmrChannel > 0 || soap_flag_xmrPubKey > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__RegisterDisplay *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RegisterDisplay, SOAP_TYPE_ns1__RegisterDisplay, sizeof(struct ns1__RegisterDisplay), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__RegisterDisplay * SOAP_FMAC2 soap_instantiate_ns1__RegisterDisplay(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RegisterDisplay(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__RegisterDisplay *p;
	size_t k = sizeof(struct ns1__RegisterDisplay);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RegisterDisplay, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__RegisterDisplay);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__RegisterDisplay, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__RegisterDisplay location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterDisplay(struct soap *soap, const struct ns1__RegisterDisplay *a, const char *tag, const char *type)
{
	if (soap_out_ns1__RegisterDisplay(soap, tag ? tag : "ns1:RegisterDisplay", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__RegisterDisplay * SOAP_FMAC4 soap_get_ns1__RegisterDisplay(struct soap *soap, struct ns1__RegisterDisplay *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RegisterDisplay(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__RegisterDisplayResponse(struct soap *soap, struct ns1__RegisterDisplayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ActivationMessage);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__RegisterDisplayResponse(struct soap *soap, const struct ns1__RegisterDisplayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->ActivationMessage);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegisterDisplayResponse(struct soap *soap, const char *tag, int id, const struct ns1__RegisterDisplayResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RegisterDisplayResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "ActivationMessage", -1, &a->ActivationMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__RegisterDisplayResponse * SOAP_FMAC4 soap_in_ns1__RegisterDisplayResponse(struct soap *soap, const char *tag, struct ns1__RegisterDisplayResponse *a, const char *type)
{
	size_t soap_flag_ActivationMessage = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__RegisterDisplayResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RegisterDisplayResponse, sizeof(struct ns1__RegisterDisplayResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__RegisterDisplayResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ActivationMessage && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ActivationMessage", &a->ActivationMessage, "xsd:string"))
				{	soap_flag_ActivationMessage--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ActivationMessage > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__RegisterDisplayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RegisterDisplayResponse, SOAP_TYPE_ns1__RegisterDisplayResponse, sizeof(struct ns1__RegisterDisplayResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__RegisterDisplayResponse * SOAP_FMAC2 soap_instantiate_ns1__RegisterDisplayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RegisterDisplayResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__RegisterDisplayResponse *p;
	size_t k = sizeof(struct ns1__RegisterDisplayResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RegisterDisplayResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__RegisterDisplayResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__RegisterDisplayResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__RegisterDisplayResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegisterDisplayResponse(struct soap *soap, const struct ns1__RegisterDisplayResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__RegisterDisplayResponse(soap, tag ? tag : "ns1:RegisterDisplayResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__RegisterDisplayResponse * SOAP_FMAC4 soap_get_ns1__RegisterDisplayResponse(struct soap *soap, struct ns1__RegisterDisplayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RegisterDisplayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
